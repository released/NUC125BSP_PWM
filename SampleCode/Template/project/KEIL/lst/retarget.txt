; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\retarget.crf ..\..\..\..\Library\StdDriver\src\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;616     */
;;;617    char GetChar(void)
000000  4803              LDR      r0,|L1.16|
                  |L1.2|
;;;618    {
;;;619    #ifdef DEBUG_ENABLE_SEMIHOST
;;;620    # if defined (__CC_ARM)
;;;621        int nRet;
;;;622    
;;;623        while (SH_DoCommand(0x101, 0, &nRet) != 0)
;;;624        {
;;;625            if (nRet != 0)
;;;626            {
;;;627                SH_DoCommand(0x07, 0, &nRet);
;;;628                return (char)nRet;
;;;629            }
;;;630        }
;;;631    
;;;632    # else
;;;633        int nRet;
;;;634    
;;;635        while (SH_DoCommand(0x7, 0, &nRet) != 0)
;;;636        {
;;;637            if (nRet != 0)
;;;638                return (char)nRet;
;;;639        }
;;;640    
;;;641    # endif
;;;642        return (0);
;;;643    #else
;;;644    
;;;645        while (1)
;;;646        {
;;;647            if ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0U)
000002  6981              LDR      r1,[r0,#0x18]
000004  0449              LSLS     r1,r1,#17
000006  d4fc              BMI      |L1.2|
;;;648            {
;;;649                return (DEBUG_PORT->DAT);
000008  6800              LDR      r0,[r0,#0]
00000a  b2c0              UXTB     r0,r0
;;;650            }
;;;651        }
;;;652    
;;;653    #endif
;;;654    }
00000c  4770              BX       lr
;;;655    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x40050000

                          AREA ||i.Hard_Fault_Handler||, CODE, READONLY, ALIGN=2

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;87      */
;;;88     void Hard_Fault_Handler(uint32_t stack[])
000000  a001              ADR      r0,|L2.8|
;;;89     {
;;;90         printf("In Hard Fault Handler\n");
000002  f7fffffe          BL       __2printf
                  |L2.6|
;;;91     
;;;92         stackDump(stack);
;;;93     
;;;94         // Replace while(1) with chip reset if WDT is not enabled for end product
;;;95         while (1);
000006  e7fe              B        |L2.6|
;;;96     
;;;97         //SYS->IPRSTC1 = SYS_IPRSTC1_CHIP_RST_Msk;
;;;98     }
;;;99     
                          ENDP

                  |L2.8|
000008  496e2048          DCB      "In Hard Fault Handler\n",0
00000c  61726420
000010  4661756c
000014  74204861
000018  6e646c65
00001c  720a00  
00001f  00                DCB      0

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;681    
;;;682    int IsDebugFifoEmpty(void)
000000  4802              LDR      r0,|L3.12|
;;;683    {
;;;684        return ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) != 0U);
000002  6980              LDR      r0,[r0,#0x18]
000004  00c0              LSLS     r0,r0,#3
000006  0fc0              LSRS     r0,r0,#31
;;;685    }
000008  4770              BX       lr
;;;686    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=1

                  SendChar PROC
;;;577     */
;;;578    void SendChar(int ch)
000000  b500              PUSH     {lr}
;;;579    {
;;;580    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;581        g_buf[g_buf_len++] = ch;
;;;582        g_buf[g_buf_len] = '\0';
;;;583    
;;;584        if (g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0')
;;;585        {
;;;586            /* Send the char */
;;;587            if (SH_DoCommand(0x04, (int)g_buf, NULL) != 0)
;;;588            {
;;;589                g_buf_len = 0;
;;;590                return;
;;;591            }
;;;592            else
;;;593            {
;;;594                int i;
;;;595    
;;;596                for (i = 0; i < g_buf_len; i++)
;;;597                    SendChar_ToUART(g_buf[i]);
;;;598    
;;;599                g_buf_len = 0;
;;;600            }
;;;601        }
;;;602    
;;;603    #else
;;;604        SendChar_ToUART(ch);
000002  f7fffffe          BL       SendChar_ToUART
;;;605    #endif
;;;606    }
000006  bd00              POP      {pc}
;;;607    
                          ENDP


                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;492    #ifndef NONBLOCK_PRINTF
;;;493    void SendChar_ToUART(int ch)
000000  4906              LDR      r1,|L5.28|
                  |L5.2|
;;;494    {
;;;495    
;;;496        while (DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);    
000002  698a              LDR      r2,[r1,#0x18]
000004  0212              LSLS     r2,r2,#8
000006  d4fc              BMI      |L5.2|
;;;497    
;;;498        if (ch == '\n')
000008  280a              CMP      r0,#0xa
00000a  d104              BNE      |L5.22|
;;;499        {
;;;500            DEBUG_PORT->DAT = '\r';		
00000c  220d              MOVS     r2,#0xd
00000e  600a              STR      r2,[r1,#0]
                  |L5.16|
;;;501            while (DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
000010  698a              LDR      r2,[r1,#0x18]
000012  0212              LSLS     r2,r2,#8
000014  d4fc              BMI      |L5.16|
                  |L5.22|
;;;502        }
;;;503    	
;;;504    	DEBUG_PORT->DAT = ch;
000016  6008              STR      r0,[r1,#0]
;;;505    }
000018  4770              BX       lr
;;;506    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;696    
;;;697    void _ttywrch(int ch)
000000  b500              PUSH     {lr}
000002  f7fffffe          BL       SendChar_ToUART
;;;698    {
;;;699        SendChar(ch);
;;;700        return;
;;;701    }
000006  bd00              POP      {pc}
;;;702    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;799    
;;;800    int ferror(FILE *stream)
000000  2000              MOVS     r0,#0
;;;801    {
;;;802        return EOF;
000002  43c0              MVNS     r0,r0
;;;803    }
000004  4770              BX       lr
;;;804    #endif
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;779    
;;;780    int fgetc(FILE *stream)
000000  b500              PUSH     {lr}
;;;781    {
;;;782        return (GetChar());
000002  f7fffffe          BL       GetChar
;;;783    }
000006  bd00              POP      {pc}
;;;784    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;721    
;;;722    int fputc(int ch, FILE *stream)
000000  b500              PUSH     {lr}
;;;723    {
000002  4603              MOV      r3,r0
000004  f7fffffe          BL       SendChar_ToUART
;;;724        (void) stream;
;;;725        SendChar(ch);
;;;726        return ch;
000008  4618              MOV      r0,r3
;;;727    }
00000a  bd00              POP      {pc}
;;;728    
                          ENDP


                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;666    
;;;667    int kbhit(void)
000000  4802              LDR      r0,|L10.12|
;;;668    {
;;;669        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0U);
000002  6980              LDR      r0,[r0,#0x18]
000004  0440              LSLS     r0,r0,#17
000006  0fc0              LSRS     r0,r0,#31
;;;670    }
000008  4770              BX       lr
;;;671    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40050000

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_retarget_c_d5a1b03f____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REVSH|
#line 479
|__asm___10_retarget_c_d5a1b03f____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 463 "..\\..\\..\\..\\Library\\StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 464

 MOVS r0, #4 
 MOV r1, LR
 TST r0, r1  
 BEQ Stack_Use_MSP  
 MRS R0, PSP  
 B Get_LR_and_Branch
Stack_Use_MSP
 MRS R0, MSP  
Get_LR_and_Branch
 MOV R1, LR  
 LDR R2,= |Hard_Fault_Handler|  
 BX R2
	ENDP

;*** End   embedded assembler ***
