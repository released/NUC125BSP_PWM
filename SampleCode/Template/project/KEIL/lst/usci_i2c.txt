; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usci_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usci_i2c.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\usci_i2c.crf ..\..\..\..\Library\StdDriver\src\usci_i2c.c]
                          THUMB

                          AREA ||i.UI2C_ClearIntFlag||, CODE, READONLY, ALIGN=1

                  UI2C_ClearIntFlag PROC
;;;341     */
;;;342    void UI2C_ClearIntFlag(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;343    {
000002  d001              BEQ      |L1.8|
;;;344        /* Clear Time-out Interrupt Flag */
;;;345        if (u32Mask & UI2C_TO_INT_MASK)
;;;346            ui2c->PROTSTS = UI2C_PROTSTS_TOIF_Msk;
000004  2220              MOVS     r2,#0x20
000006  6642              STR      r2,[r0,#0x64]
                  |L1.8|
;;;347    
;;;348        /* Clear Start Condition Received Interrupt Flag */
;;;349        if (u32Mask & UI2C_STAR_INT_MASK)
000008  078a              LSLS     r2,r1,#30
00000a  d502              BPL      |L1.18|
;;;350            ui2c->PROTSTS = UI2C_PROTSTS_STARIF_Msk;
00000c  22ff              MOVS     r2,#0xff
00000e  3201              ADDS     r2,#1
000010  6642              STR      r2,[r0,#0x64]
                  |L1.18|
;;;351    
;;;352        /* Clear Stop Condition Received Interrupt Flag */
;;;353        if (u32Mask & UI2C_STOR_INT_MASK)
000012  074a              LSLS     r2,r1,#29
000014  d502              BPL      |L1.28|
;;;354            ui2c->PROTSTS = UI2C_PROTSTS_STORIF_Msk;
000016  2201              MOVS     r2,#1
000018  0252              LSLS     r2,r2,#9
00001a  6642              STR      r2,[r0,#0x64]
                  |L1.28|
;;;355    
;;;356        /* Clear Non-Acknowledge Interrupt Flag */
;;;357        if (u32Mask & UI2C_NACK_INT_MASK)
00001c  070a              LSLS     r2,r1,#28
00001e  d502              BPL      |L1.38|
;;;358            ui2c->PROTSTS = UI2C_PROTSTS_NACKIF_Msk;
000020  2201              MOVS     r2,#1
000022  0292              LSLS     r2,r2,#10
000024  6642              STR      r2,[r0,#0x64]
                  |L1.38|
;;;359    
;;;360        /* Clear Arbitration Lost Interrupt Flag */
;;;361        if (u32Mask & UI2C_ARBLO_INT_MASK)
000026  06ca              LSLS     r2,r1,#27
000028  d502              BPL      |L1.48|
;;;362            ui2c->PROTSTS = UI2C_PROTSTS_ARBLOIF_Msk;
00002a  2201              MOVS     r2,#1
00002c  02d2              LSLS     r2,r2,#11
00002e  6642              STR      r2,[r0,#0x64]
                  |L1.48|
;;;363    
;;;364        /* Clear Error Interrupt Flag */
;;;365        if (u32Mask & UI2C_ERR_INT_MASK)
000030  068a              LSLS     r2,r1,#26
000032  d502              BPL      |L1.58|
;;;366            ui2c->PROTSTS = UI2C_PROTSTS_ERRIF_Msk;
000034  2201              MOVS     r2,#1
000036  0312              LSLS     r2,r2,#12
000038  6642              STR      r2,[r0,#0x64]
                  |L1.58|
;;;367    
;;;368        /* Clear Acknowledge Interrupt Flag */
;;;369        if (u32Mask & UI2C_ACK_INT_MASK)
00003a  0649              LSLS     r1,r1,#25
00003c  d502              BPL      |L1.68|
;;;370            ui2c->PROTSTS = UI2C_PROTSTS_ACKIF_Msk;
00003e  2101              MOVS     r1,#1
000040  0349              LSLS     r1,r1,#13
000042  6641              STR      r1,[r0,#0x64]
                  |L1.68|
;;;371    }
000044  4770              BX       lr
;;;372    
                          ENDP


                          AREA ||i.UI2C_ClearTimeoutFlag||, CODE, READONLY, ALIGN=1

                  UI2C_ClearTimeoutFlag PROC
;;;86      */
;;;87     void UI2C_ClearTimeoutFlag(UI2C_T *ui2c)
000000  2120              MOVS     r1,#0x20
;;;88     {
;;;89         ui2c->PROTSTS = UI2C_PROTSTS_TOIF_Msk;
000002  6641              STR      r1,[r0,#0x64]
;;;90     }
000004  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.UI2C_Close||, CODE, READONLY, ALIGN=1

                  UI2C_Close PROC
;;;71      */
;;;72     void UI2C_Close(UI2C_T *ui2c)
000000  6801              LDR      r1,[r0,#0]
;;;73     {
;;;74         /* Disable USCI_I2C function */
;;;75         ui2c->CTL &= ~UI2C_CTL_FUNMODE_Msk;
000002  08c9              LSRS     r1,r1,#3
000004  00c9              LSLS     r1,r1,#3
000006  6001              STR      r1,[r0,#0]
;;;76     }
000008  4770              BX       lr
;;;77     
                          ENDP


                          AREA ||i.UI2C_DisableInt||, CODE, READONLY, ALIGN=1

                  UI2C_DisableInt PROC
;;;143     */
;;;144    void UI2C_DisableInt(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;145    {
000002  d003              BEQ      |L4.12|
;;;146        /* Disable time-out interrupt flag */
;;;147        if ((u32Mask & UI2C_TO_INT_MASK) == UI2C_TO_INT_MASK)
;;;148            ui2c->PROTIEN &= ~UI2C_PROTIEN_TOIEN_Msk;
000004  6e02              LDR      r2,[r0,#0x60]
000006  0852              LSRS     r2,r2,#1
000008  0052              LSLS     r2,r2,#1
00000a  6602              STR      r2,[r0,#0x60]
                  |L4.12|
;;;149    
;;;150        /* Disable start condition received interrupt flag */
;;;151        if ((u32Mask & UI2C_STAR_INT_MASK) == UI2C_STAR_INT_MASK)
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L4.24|
;;;152            ui2c->PROTIEN &= ~UI2C_PROTIEN_STARIEN_Msk;
000010  6e02              LDR      r2,[r0,#0x60]
000012  2302              MOVS     r3,#2
000014  439a              BICS     r2,r2,r3
000016  6602              STR      r2,[r0,#0x60]
                  |L4.24|
;;;153    
;;;154        /* Disable stop condition received interrupt flag */
;;;155        if ((u32Mask & UI2C_STOR_INT_MASK) == UI2C_STOR_INT_MASK)
000018  074a              LSLS     r2,r1,#29
00001a  d503              BPL      |L4.36|
;;;156            ui2c->PROTIEN &= ~UI2C_PROTIEN_STORIEN_Msk;
00001c  6e02              LDR      r2,[r0,#0x60]
00001e  2304              MOVS     r3,#4
000020  439a              BICS     r2,r2,r3
000022  6602              STR      r2,[r0,#0x60]
                  |L4.36|
;;;157    
;;;158        /* Disable non-acknowledge interrupt flag */
;;;159        if ((u32Mask & UI2C_NACK_INT_MASK) == UI2C_NACK_INT_MASK)
000024  070a              LSLS     r2,r1,#28
000026  d503              BPL      |L4.48|
;;;160            ui2c->PROTIEN &= ~UI2C_PROTIEN_NACKIEN_Msk;
000028  6e02              LDR      r2,[r0,#0x60]
00002a  2308              MOVS     r3,#8
00002c  439a              BICS     r2,r2,r3
00002e  6602              STR      r2,[r0,#0x60]
                  |L4.48|
;;;161    
;;;162        /* Disable arbitration lost interrupt flag */
;;;163        if ((u32Mask & UI2C_ARBLO_INT_MASK) == UI2C_ARBLO_INT_MASK)
000030  06ca              LSLS     r2,r1,#27
000032  d503              BPL      |L4.60|
;;;164            ui2c->PROTIEN &= ~UI2C_PROTIEN_ARBLOIEN_Msk;
000034  6e02              LDR      r2,[r0,#0x60]
000036  2310              MOVS     r3,#0x10
000038  439a              BICS     r2,r2,r3
00003a  6602              STR      r2,[r0,#0x60]
                  |L4.60|
;;;165    
;;;166        /* Disable error interrupt flag */
;;;167        if ((u32Mask & UI2C_ERR_INT_MASK) == UI2C_ERR_INT_MASK)
00003c  068a              LSLS     r2,r1,#26
00003e  d503              BPL      |L4.72|
;;;168            ui2c->PROTIEN &= ~UI2C_PROTIEN_ERRIEN_Msk;
000040  6e02              LDR      r2,[r0,#0x60]
000042  2320              MOVS     r3,#0x20
000044  439a              BICS     r2,r2,r3
000046  6602              STR      r2,[r0,#0x60]
                  |L4.72|
;;;169    
;;;170        /* Disable acknowledge interrupt flag */
;;;171        if ((u32Mask & UI2C_ACK_INT_MASK) == UI2C_ACK_INT_MASK)
000048  0649              LSLS     r1,r1,#25
00004a  d503              BPL      |L4.84|
;;;172            ui2c->PROTIEN &= ~UI2C_PROTIEN_ACKIEN_Msk;
00004c  6e01              LDR      r1,[r0,#0x60]
00004e  2240              MOVS     r2,#0x40
000050  4391              BICS     r1,r1,r2
000052  6601              STR      r1,[r0,#0x60]
                  |L4.84|
;;;173    }
000054  4770              BX       lr
;;;174    
                          ENDP


                          AREA ||i.UI2C_DisableTimeout||, CODE, READONLY, ALIGN=2

                  UI2C_DisableTimeout PROC
;;;470     */
;;;471    void UI2C_DisableTimeout(UI2C_T *ui2c)
000000  6dc1              LDR      r1,[r0,#0x5c]
;;;472    {
;;;473        ui2c->PROTCTL &= ~UI2C_PROTCTL_TOCNT_Msk;
000002  4a04              LDR      r2,|L5.20|
000004  4011              ANDS     r1,r1,r2
000006  65c1              STR      r1,[r0,#0x5c]
;;;474        ui2c->BRGEN &= ~UI2C_BRGEN_TMCNTEN_Msk;
000008  6881              LDR      r1,[r0,#8]
00000a  2210              MOVS     r2,#0x10
00000c  4391              BICS     r1,r1,r2
00000e  6081              STR      r1,[r0,#8]
;;;475    }
000010  4770              BX       lr
;;;476    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_DisableWakeup||, CODE, READONLY, ALIGN=1

                  UI2C_DisableWakeup PROC
;;;502     */
;;;503    void UI2C_DisableWakeup(UI2C_T *ui2c)
000000  6d41              LDR      r1,[r0,#0x54]
;;;504    {
;;;505        ui2c->WKCTL &= ~UI2C_WKCTL_WKEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6541              STR      r1,[r0,#0x54]
;;;506    }
000008  4770              BX       lr
;;;507    
                          ENDP


                          AREA ||i.UI2C_EnableInt||, CODE, READONLY, ALIGN=1

                  UI2C_EnableInt PROC
;;;191     */
;;;192    void UI2C_EnableInt(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;193    {
000002  d003              BEQ      |L7.12|
;;;194        /* Enable time-out interrupt flag */
;;;195        if ((u32Mask & UI2C_TO_INT_MASK) == UI2C_TO_INT_MASK)
;;;196            ui2c->PROTIEN |= UI2C_PROTIEN_TOIEN_Msk;
000004  6e02              LDR      r2,[r0,#0x60]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6602              STR      r2,[r0,#0x60]
                  |L7.12|
;;;197    
;;;198        /* Enable start condition received interrupt flag */
;;;199        if ((u32Mask & UI2C_STAR_INT_MASK) == UI2C_STAR_INT_MASK)
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L7.24|
;;;200            ui2c->PROTIEN |= UI2C_PROTIEN_STARIEN_Msk;
000010  6e02              LDR      r2,[r0,#0x60]
000012  2302              MOVS     r3,#2
000014  431a              ORRS     r2,r2,r3
000016  6602              STR      r2,[r0,#0x60]
                  |L7.24|
;;;201    
;;;202        /* Enable stop condition received interrupt flag */
;;;203        if ((u32Mask & UI2C_STOR_INT_MASK) == UI2C_STOR_INT_MASK)
000018  074a              LSLS     r2,r1,#29
00001a  d503              BPL      |L7.36|
;;;204            ui2c->PROTIEN |= UI2C_PROTIEN_STORIEN_Msk;
00001c  6e02              LDR      r2,[r0,#0x60]
00001e  2304              MOVS     r3,#4
000020  431a              ORRS     r2,r2,r3
000022  6602              STR      r2,[r0,#0x60]
                  |L7.36|
;;;205    
;;;206        /* Enable non-acknowledge interrupt flag */
;;;207        if ((u32Mask & UI2C_NACK_INT_MASK) == UI2C_NACK_INT_MASK)
000024  070a              LSLS     r2,r1,#28
000026  d503              BPL      |L7.48|
;;;208            ui2c->PROTIEN |= UI2C_PROTIEN_NACKIEN_Msk;
000028  6e02              LDR      r2,[r0,#0x60]
00002a  2308              MOVS     r3,#8
00002c  431a              ORRS     r2,r2,r3
00002e  6602              STR      r2,[r0,#0x60]
                  |L7.48|
;;;209    
;;;210        /* Enable arbitration lost interrupt flag */
;;;211        if ((u32Mask & UI2C_ARBLO_INT_MASK) == UI2C_ARBLO_INT_MASK)
000030  06ca              LSLS     r2,r1,#27
000032  d503              BPL      |L7.60|
;;;212            ui2c->PROTIEN |= UI2C_PROTIEN_ARBLOIEN_Msk;
000034  6e02              LDR      r2,[r0,#0x60]
000036  2310              MOVS     r3,#0x10
000038  431a              ORRS     r2,r2,r3
00003a  6602              STR      r2,[r0,#0x60]
                  |L7.60|
;;;213    
;;;214        /* Enable error interrupt flag */
;;;215        if ((u32Mask & UI2C_ERR_INT_MASK) == UI2C_ERR_INT_MASK)
00003c  068a              LSLS     r2,r1,#26
00003e  d503              BPL      |L7.72|
;;;216            ui2c->PROTIEN |= UI2C_PROTIEN_ERRIEN_Msk;
000040  6e02              LDR      r2,[r0,#0x60]
000042  2320              MOVS     r3,#0x20
000044  431a              ORRS     r2,r2,r3
000046  6602              STR      r2,[r0,#0x60]
                  |L7.72|
;;;217    
;;;218        /* Enable acknowledge interrupt flag */
;;;219        if ((u32Mask & UI2C_ACK_INT_MASK) == UI2C_ACK_INT_MASK)
000048  0649              LSLS     r1,r1,#25
00004a  d503              BPL      |L7.84|
;;;220            ui2c->PROTIEN |= UI2C_PROTIEN_ACKIEN_Msk;
00004c  6e01              LDR      r1,[r0,#0x60]
00004e  2240              MOVS     r2,#0x40
000050  4311              ORRS     r1,r1,r2
000052  6601              STR      r1,[r0,#0x60]
                  |L7.84|
;;;221    }
000054  4770              BX       lr
;;;222    
                          ENDP


                          AREA ||i.UI2C_EnableTimeout||, CODE, READONLY, ALIGN=2

                  UI2C_EnableTimeout PROC
;;;455     */
;;;456    void UI2C_EnableTimeout(UI2C_T *ui2c, uint32_t u32TimeoutCnt)
000000  6dc2              LDR      r2,[r0,#0x5c]
;;;457    {
;;;458        ui2c->PROTCTL = (ui2c->PROTCTL & ~UI2C_PROTCTL_TOCNT_Msk) | (u32TimeoutCnt << UI2C_PROTCTL_TOCNT_Pos);
000002  4b06              LDR      r3,|L8.28|
000004  0409              LSLS     r1,r1,#16
000006  401a              ANDS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  65c2              STR      r2,[r0,#0x5c]
;;;459        ui2c->BRGEN = (ui2c->BRGEN & ~UI2C_BRGEN_TMCNTSRC_Msk) | UI2C_BRGEN_TMCNTEN_Msk;
00000c  6881              LDR      r1,[r0,#8]
00000e  2220              MOVS     r2,#0x20
000010  4391              BICS     r1,r1,r2
000012  2210              MOVS     r2,#0x10
000014  4311              ORRS     r1,r1,r2
000016  6081              STR      r1,[r0,#8]
;;;460    }
000018  4770              BX       lr
;;;461    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_EnableWakeup||, CODE, READONLY, ALIGN=1

                  UI2C_EnableWakeup PROC
;;;488     */
;;;489    void UI2C_EnableWakeup(UI2C_T *ui2c, uint8_t u8WakeupMode)
000000  6d42              LDR      r2,[r0,#0x54]
;;;490    {
;;;491        ui2c->WKCTL = (ui2c->WKCTL & ~UI2C_WKCTL_WKADDREN_Msk) | (u8WakeupMode | UI2C_WKCTL_WKEN_Msk);
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  2101              MOVS     r1,#1
00000a  430a              ORRS     r2,r2,r1
00000c  6542              STR      r2,[r0,#0x54]
;;;492    }
00000e  4770              BX       lr
;;;493    
                          ENDP


                          AREA ||i.UI2C_GetBusClockFreq||, CODE, READONLY, ALIGN=1

                  UI2C_GetBusClockFreq PROC
;;;231     */
;;;232    uint32_t UI2C_GetBusClockFreq(UI2C_T *ui2c)
000000  b510              PUSH     {r4,lr}
;;;233    {
000002  4604              MOV      r4,r0
;;;234        uint32_t u32Divider;
;;;235        uint32_t u32Pclk;
;;;236    
;;;237        u32Pclk = CLK_GetPCLK0Freq();
000004  f7fffffe          BL       CLK_GetPCLK0Freq
;;;238    
;;;239        u32Divider = (ui2c->BRGEN & UI2C_BRGEN_CLKDIV_Msk) >> UI2C_BRGEN_CLKDIV_Pos;
000008  68a1              LDR      r1,[r4,#8]
;;;240    
;;;241        return (u32Pclk / ((u32Divider + 1) << 1));
;;;242    }
00000a  0189              LSLS     r1,r1,#6
00000c  0d89              LSRS     r1,r1,#22
00000e  0049              LSLS     r1,r1,#1              ;241
000010  1c89              ADDS     r1,r1,#2              ;241
000012  f7fffffe          BL       __aeabi_uidivmod
000016  bd10              POP      {r4,pc}
;;;243    
                          ENDP


                          AREA ||i.UI2C_GetData||, CODE, READONLY, ALIGN=1

                  UI2C_GetData PROC
;;;381     */
;;;382    uint32_t UI2C_GetData(UI2C_T *ui2c)
000000  6b40              LDR      r0,[r0,#0x34]
;;;383    {
;;;384        return (ui2c->RXDAT);
;;;385    }
000002  4770              BX       lr
;;;386    
                          ENDP


                          AREA ||i.UI2C_GetIntFlag||, CODE, READONLY, ALIGN=1

                  UI2C_GetIntFlag PROC
;;;288     */
;;;289    uint32_t UI2C_GetIntFlag(UI2C_T *ui2c, uint32_t u32Mask)
000000  4602              MOV      r2,r0
;;;290    {
;;;291        uint32_t u32IntFlag = 0;
000002  2000              MOVS     r0,#0
;;;292    
;;;293        /* Check Time-out Interrupt Flag */
;;;294        if ((u32Mask & UI2C_TO_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_TOIF_Msk))
000004  07cb              LSLS     r3,r1,#31
000006  d003              BEQ      |L12.16|
000008  6e53              LDR      r3,[r2,#0x64]
00000a  069b              LSLS     r3,r3,#26
00000c  d500              BPL      |L12.16|
;;;295            u32IntFlag |= UI2C_TO_INT_MASK;
00000e  2001              MOVS     r0,#1
                  |L12.16|
;;;296    
;;;297        /* Check Start Condition Received Interrupt Flag */
;;;298        if ((u32Mask & UI2C_STAR_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_STARIF_Msk))
000010  078b              LSLS     r3,r1,#30
000012  d504              BPL      |L12.30|
000014  6e53              LDR      r3,[r2,#0x64]
000016  05db              LSLS     r3,r3,#23
000018  d501              BPL      |L12.30|
;;;299            u32IntFlag |= UI2C_STAR_INT_MASK;
00001a  2302              MOVS     r3,#2
00001c  4318              ORRS     r0,r0,r3
                  |L12.30|
;;;300    
;;;301        /* Check Stop Condition Received Interrupt Flag */
;;;302        if ((u32Mask & UI2C_STOR_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_STORIF_Msk))
00001e  074b              LSLS     r3,r1,#29
000020  d504              BPL      |L12.44|
000022  6e53              LDR      r3,[r2,#0x64]
000024  059b              LSLS     r3,r3,#22
000026  d501              BPL      |L12.44|
;;;303            u32IntFlag |= UI2C_STOR_INT_MASK;
000028  2304              MOVS     r3,#4
00002a  4318              ORRS     r0,r0,r3
                  |L12.44|
;;;304    
;;;305        /* Check Non-Acknowledge Interrupt Flag */
;;;306        if ((u32Mask & UI2C_NACK_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_NACKIF_Msk))
00002c  070b              LSLS     r3,r1,#28
00002e  d504              BPL      |L12.58|
000030  6e53              LDR      r3,[r2,#0x64]
000032  055b              LSLS     r3,r3,#21
000034  d501              BPL      |L12.58|
;;;307            u32IntFlag |= UI2C_NACK_INT_MASK;
000036  2308              MOVS     r3,#8
000038  4318              ORRS     r0,r0,r3
                  |L12.58|
;;;308    
;;;309        /* Check Arbitration Lost Interrupt Flag */
;;;310        if ((u32Mask & UI2C_ARBLO_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_ARBLOIF_Msk))
00003a  06cb              LSLS     r3,r1,#27
00003c  d504              BPL      |L12.72|
00003e  6e53              LDR      r3,[r2,#0x64]
000040  051b              LSLS     r3,r3,#20
000042  d501              BPL      |L12.72|
;;;311            u32IntFlag |= UI2C_ARBLO_INT_MASK;
000044  2310              MOVS     r3,#0x10
000046  4318              ORRS     r0,r0,r3
                  |L12.72|
;;;312    
;;;313        /* Check Error Interrupt Flag */
;;;314        if ((u32Mask & UI2C_ERR_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_ERRIF_Msk))
000048  068b              LSLS     r3,r1,#26
00004a  d504              BPL      |L12.86|
00004c  6e53              LDR      r3,[r2,#0x64]
00004e  04db              LSLS     r3,r3,#19
000050  d501              BPL      |L12.86|
;;;315            u32IntFlag |= UI2C_ERR_INT_MASK;
000052  2320              MOVS     r3,#0x20
000054  4318              ORRS     r0,r0,r3
                  |L12.86|
;;;316    
;;;317        /* Check Acknowledge Interrupt Flag */
;;;318        if ((u32Mask & UI2C_ACK_INT_MASK) && (ui2c->PROTSTS & UI2C_PROTSTS_ACKIF_Msk))
000056  0649              LSLS     r1,r1,#25
000058  d504              BPL      |L12.100|
00005a  6e51              LDR      r1,[r2,#0x64]
00005c  0489              LSLS     r1,r1,#18
00005e  d501              BPL      |L12.100|
;;;319            u32IntFlag |= UI2C_ACK_INT_MASK;
000060  2140              MOVS     r1,#0x40
000062  4308              ORRS     r0,r0,r1
                  |L12.100|
;;;320    
;;;321        return u32IntFlag;
;;;322    }
000064  4770              BX       lr
;;;323    
                          ENDP


                          AREA ||i.UI2C_Open||, CODE, READONLY, ALIGN=2

                  UI2C_Open PROC
;;;33      */
;;;34     uint32_t UI2C_Open(UI2C_T *ui2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;35     {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;36         uint32_t u32ClkDiv;
;;;37         uint32_t u32Pclk;
;;;38     
;;;39         u32Pclk = CLK_GetPCLK0Freq();
000006  f7fffffe          BL       CLK_GetPCLK0Freq
00000a  4605              MOV      r5,r0
;;;40     
;;;41         u32ClkDiv = (uint32_t)((((((u32Pclk / 2) * 10) / (u32BusClock)) + 5) / 10) - 1); /* Compute proper divider for USCI_I2C clock */
00000c  0840              LSRS     r0,r0,#1
00000e  210a              MOVS     r1,#0xa
000010  4348              MULS     r0,r1,r0
000012  4631              MOV      r1,r6
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  1d40              ADDS     r0,r0,#5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;42     
;;;43         /* Enable USCI_I2C protocol */
;;;44         ui2c->CTL &= ~UI2C_CTL_FUNMODE_Msk;
000020  6821              LDR      r1,[r4,#0]
000022  08c9              LSRS     r1,r1,#3
000024  00c9              LSLS     r1,r1,#3
000026  6021              STR      r1,[r4,#0]
;;;45         ui2c->CTL = 4 << UI2C_CTL_FUNMODE_Pos;
000028  2104              MOVS     r1,#4
00002a  6021              STR      r1,[r4,#0]
;;;46     
;;;47         /* Data format configuration */
;;;48         /* 8 bit data length */
;;;49         ui2c->LINECTL &= ~UI2C_LINECTL_DWIDTH_Msk;
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  220f              MOVS     r2,#0xf
000030  0212              LSLS     r2,r2,#8
000032  4391              BICS     r1,r1,r2
000034  62e1              STR      r1,[r4,#0x2c]
;;;50         ui2c->LINECTL |= 8 << UI2C_LINECTL_DWIDTH_Pos;
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  2201              MOVS     r2,#1
00003a  02d2              LSLS     r2,r2,#11
00003c  4311              ORRS     r1,r1,r2
00003e  62e1              STR      r1,[r4,#0x2c]
;;;51     
;;;52         /* MSB data format */
;;;53         ui2c->LINECTL &= ~UI2C_LINECTL_LSB_Msk;
000040  6ae1              LDR      r1,[r4,#0x2c]
000042  0849              LSRS     r1,r1,#1
000044  0049              LSLS     r1,r1,#1
000046  62e1              STR      r1,[r4,#0x2c]
;;;54     
;;;55         /* Set USCI_I2C bus clock */
;;;56         ui2c->BRGEN &= ~UI2C_BRGEN_CLKDIV_Msk;
000048  68a1              LDR      r1,[r4,#8]
00004a  4a09              LDR      r2,|L13.112|
00004c  4011              ANDS     r1,r1,r2
00004e  60a1              STR      r1,[r4,#8]
;;;57         ui2c->BRGEN |= (u32ClkDiv << UI2C_BRGEN_CLKDIV_Pos);
000050  68a1              LDR      r1,[r4,#8]
000052  1e40              SUBS     r0,r0,#1
000054  0402              LSLS     r2,r0,#16
000056  4311              ORRS     r1,r1,r2
000058  60a1              STR      r1,[r4,#8]
;;;58         ui2c->PROTCTL |=  UI2C_PROTCTL_PROTEN_Msk;
00005a  6de1              LDR      r1,[r4,#0x5c]
00005c  2201              MOVS     r2,#1
00005e  07d2              LSLS     r2,r2,#31
000060  4311              ORRS     r1,r1,r2
000062  65e1              STR      r1,[r4,#0x5c]
;;;59     
;;;60         return (u32Pclk / ((u32ClkDiv + 1) << 1));
000064  0041              LSLS     r1,r0,#1
000066  4628              MOV      r0,r5
000068  1c89              ADDS     r1,r1,#2
00006a  f7fffffe          BL       __aeabi_uidivmod
;;;61     }
00006e  bd70              POP      {r4-r6,pc}
;;;62     
                          ENDP

                  |L13.112|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_ReadByte||, CODE, READONLY, ALIGN=2

                  UI2C_ReadByte PROC
;;;962      */
;;;963    uint8_t UI2C_ReadByte(UI2C_T *ui2c, uint8_t u8SlaveAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;964    {
;;;965        uint8_t u8Xfering = 1, u8Err = 0, u8rData = 0, u8Ctrl = 0;
000002  2300              MOVS     r3,#0
000004  2601              MOVS     r6,#1
;;;966        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;967    
;;;968        UI2C_START(ui2c);                                                       /* Send START */
000006  6dc7              LDR      r7,[r0,#0x5c]
000008  468c              MOV      r12,r1                ;964
00000a  461d              MOV      r5,r3                 ;965
00000c  461a              MOV      r2,r3                 ;965
00000e  2412              MOVS     r4,#0x12              ;966
000010  2120              MOVS     r1,#0x20
000012  438f              BICS     r7,r7,r1
000014  2108              MOVS     r1,#8
000016  430f              ORRS     r7,r7,r1
000018  65c7              STR      r7,[r0,#0x5c]
                  |L14.26|
;;;969    
;;;970        while (u8Xfering && (u8Err == 0))
;;;971        {
;;;972            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L14.26|
;;;973    
;;;974            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000022  6e47              LDR      r7,[r0,#0x64]
000024  213f              MOVS     r1,#0x3f
000026  0209              LSLS     r1,r1,#8
000028  400f              ANDS     r7,r7,r1
00002a  3fff              SUBS     r7,r7,#0xff
00002c  1e7f              SUBS     r7,r7,#1
00002e  d00d              BEQ      |L14.76|
000030  2103              MOVS     r1,#3
000032  0209              LSLS     r1,r1,#8
000034  1a7f              SUBS     r7,r7,r1
000036  d014              BEQ      |L14.98|
000038  2107              MOVS     r1,#7
00003a  0289              LSLS     r1,r1,#10
00003c  428f              CMP      r7,r1
00003e  d124              BNE      |L14.138|
;;;975            {
;;;976                case UI2C_PROTSTS_STARIF_Msk:
;;;977                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;978                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x01);             /* Write SLA+R to Register UI2C_TXDAT */
;;;979                    eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;980                    u8Ctrl = UI2C_CTL_PTRG;
;;;981                    break;
;;;982    
;;;983                case UI2C_PROTSTS_ACKIF_Msk:
;;;984                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000040  2401              MOVS     r4,#1
000042  4916              LDR      r1,|L14.156|
000044  0364              LSLS     r4,r4,#13
000046  624c              STR      r4,[r1,#0x24]
;;;985                    eEvent = MASTER_READ_DATA;
000048  2410              MOVS     r4,#0x10
;;;986                    break;
00004a  e014              B        |L14.118|
                  |L14.76|
00004c  22ff              MOVS     r2,#0xff              ;977
00004e  4913              LDR      r1,|L14.156|
000050  3201              ADDS     r2,#1                 ;977
000052  624a              STR      r2,[r1,#0x24]         ;977
000054  4661              MOV      r1,r12                ;978
000056  0049              LSLS     r1,r1,#1              ;978
000058  1c49              ADDS     r1,r1,#1              ;978
00005a  6301              STR      r1,[r0,#0x30]         ;978
00005c  240c              MOVS     r4,#0xc               ;979
00005e  2220              MOVS     r2,#0x20              ;980
000060  e009              B        |L14.118|
                  |L14.98|
;;;987    
;;;988                case UI2C_PROTSTS_NACKIF_Msk:
;;;989                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
000062  2201              MOVS     r2,#1
000064  490d              LDR      r1,|L14.156|
000066  0292              LSLS     r2,r2,#10
000068  624a              STR      r2,[r1,#0x24]
;;;990    
;;;991                    if (eEvent == MASTER_SEND_H_RD_ADDRESS)
00006a  2c0c              CMP      r4,#0xc
00006c  d00d              BEQ      |L14.138|
;;;992                    {
;;;993                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;994                        u8Err = 1;
;;;995                    }
;;;996                    else
;;;997                    {
;;;998                        u8rData = (unsigned char) UI2C_GET_DATA(ui2c);            /* Receive Data */
00006e  6b41              LDR      r1,[r0,#0x34]
;;;999                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
000070  2224              MOVS     r2,#0x24
000072  b2cd              UXTB     r5,r1                 ;998
;;;1000                       u8Xfering = 0;
000074  2600              MOVS     r6,#0
                  |L14.118|
;;;1001                   }
;;;1002   
;;;1003                   break;
;;;1004   
;;;1005               case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1006               default:                                                        /* Unknow status */
;;;1007                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1008                   u8Err = 1;
;;;1009                   break;
;;;1010           }
;;;1011   
;;;1012           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000076  6dc7              LDR      r7,[r0,#0x5c]
000078  212e              MOVS     r1,#0x2e
00007a  438f              BICS     r7,r7,r1
00007c  4317              ORRS     r7,r7,r2
00007e  65c7              STR      r7,[r0,#0x5c]
000080  2e00              CMP      r6,#0                 ;970
000082  d005              BEQ      |L14.144|
000084  2b00              CMP      r3,#0                 ;970
000086  d0c8              BEQ      |L14.26|
000088  e004              B        |L14.148|
                  |L14.138|
00008a  2224              MOVS     r2,#0x24              ;993
00008c  2301              MOVS     r3,#1                 ;994
00008e  e7f2              B        |L14.118|
                  |L14.144|
;;;1013       }
;;;1014   
;;;1015       if (u8Err)
000090  2b00              CMP      r3,#0
000092  d000              BEQ      |L14.150|
                  |L14.148|
;;;1016           u8rData = 0;
000094  2500              MOVS     r5,#0
                  |L14.150|
;;;1017   
;;;1018       return u8rData;                                                           /* Return read data */
000096  4628              MOV      r0,r5
;;;1019   }
000098  bdf0              POP      {r4-r7,pc}
;;;1020   
                          ENDP

00009a  0000              DCW      0x0000
                  |L14.156|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadByteOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_ReadByteOneReg PROC
;;;1120     */
;;;1121   uint8_t UI2C_ReadByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1122   {
000002  4696              MOV      lr,r2
;;;1123       uint8_t u8Xfering = 1, u8Err = 0, u8rData = 0, u8Ctrl = 0;
000004  2201              MOVS     r2,#1
000006  4694              MOV      r12,r2
000008  2400              MOVS     r4,#0
;;;1124       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1125   
;;;1126       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc2              LDR      r2,[r0,#0x5c]
00000c  4625              MOV      r5,r4                 ;1123
00000e  2312              MOVS     r3,#0x12              ;1124
000010  2620              MOVS     r6,#0x20
000012  43b2              BICS     r2,r2,r6
000014  2608              MOVS     r6,#8
000016  4332              ORRS     r2,r2,r6
000018  65c2              STR      r2,[r0,#0x5c]
;;;1127   
;;;1128       while (u8Xfering && (u8Err == 0))
;;;1129       {
;;;1130           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1131   
;;;1132           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1133           {
;;;1134               case UI2C_PROTSTS_STARIF_Msk:
;;;1135                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1136   
;;;1137                   if (eEvent == MASTER_SEND_START)
;;;1138                   {
;;;1139                       UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);         /* Write SLA+W to Register UI2C_TXDAT */
00001a  004e              LSLS     r6,r1,#1
                  |L15.28|
00001c  6e41              LDR      r1,[r0,#0x64]         ;1130
00001e  0489              LSLS     r1,r1,#18             ;1130
000020  0e89              LSRS     r1,r1,#26             ;1130
000022  d0fb              BEQ      |L15.28|
000024  6e41              LDR      r1,[r0,#0x64]         ;1132
000026  273f              MOVS     r7,#0x3f              ;1132
000028  023f              LSLS     r7,r7,#8              ;1132
00002a  4039              ANDS     r1,r1,r7              ;1132
00002c  39ff              SUBS     r1,r1,#0xff           ;1132
00002e  1e49              SUBS     r1,r1,#1              ;1132
000030  d012              BEQ      |L15.88|
000032  2703              MOVS     r7,#3                 ;1132
000034  023f              LSLS     r7,r7,#8              ;1132
000036  1bc9              SUBS     r1,r1,r7              ;1132
000038  d029              BEQ      |L15.142|
00003a  2707              MOVS     r7,#7                 ;1132
00003c  02bf              LSLS     r7,r7,#10             ;1132
00003e  42b9              CMP      r1,r7                 ;1132
000040  d13b              BNE      |L15.186|
;;;1140                       eEvent = MASTER_SEND_ADDRESS;
;;;1141                   }
;;;1142                   else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1143                   {
;;;1144                       UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1145                       eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1146                   }
;;;1147   
;;;1148                   u8Ctrl = UI2C_CTL_PTRG;
;;;1149                   break;
;;;1150   
;;;1151               case UI2C_PROTSTS_ACKIF_Msk:
;;;1152                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  4921              LDR      r1,|L15.204|
000046  037f              LSLS     r7,r7,#13
000048  624f              STR      r7,[r1,#0x24]
;;;1153   
;;;1154                   if (eEvent == MASTER_SEND_ADDRESS)
00004a  2b0a              CMP      r3,#0xa
00004c  d017              BEQ      |L15.126|
;;;1155                   {
;;;1156                       UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address of register */
;;;1157                       u8Ctrl = UI2C_CTL_PTRG;
;;;1158                       eEvent = MASTER_SEND_DATA;
;;;1159                   }
;;;1160                   else if (eEvent == MASTER_SEND_DATA)
00004e  2b0e              CMP      r3,#0xe
000050  d01a              BEQ      |L15.136|
;;;1161                   {
;;;1162                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1163                       eEvent = MASTER_SEND_REPEAT_START;
;;;1164                   }
;;;1165                   else
;;;1166                   {
;;;1167                       /* SLA+R ACK */
;;;1168                       u8Ctrl = UI2C_CTL_PTRG;
000052  2120              MOVS     r1,#0x20
;;;1169                       eEvent = MASTER_READ_DATA;
000054  2310              MOVS     r3,#0x10
000056  e025              B        |L15.164|
                  |L15.88|
000058  27ff              MOVS     r7,#0xff              ;1135
00005a  491c              LDR      r1,|L15.204|
00005c  3701              ADDS     r7,#1                 ;1135
00005e  624f              STR      r7,[r1,#0x24]         ;1135
000060  2b12              CMP      r3,#0x12              ;1137
000062  d002              BEQ      |L15.106|
000064  2b0f              CMP      r3,#0xf               ;1142
000066  d003              BEQ      |L15.112|
000068  e007              B        |L15.122|
                  |L15.106|
00006a  6306              STR      r6,[r0,#0x30]         ;1139
00006c  230a              MOVS     r3,#0xa               ;1140
00006e  e004              B        |L15.122|
                  |L15.112|
000070  4a16              LDR      r2,|L15.204|
000072  1c71              ADDS     r1,r6,#1              ;1144
000074  3a40              SUBS     r2,r2,#0x40           ;1144
000076  6311              STR      r1,[r2,#0x30]         ;1144
000078  230c              MOVS     r3,#0xc               ;1145
                  |L15.122|
00007a  2120              MOVS     r1,#0x20              ;1148
00007c  e012              B        |L15.164|
                  |L15.126|
00007e  4671              MOV      r1,lr                 ;1156
000080  6301              STR      r1,[r0,#0x30]         ;1156
000082  2120              MOVS     r1,#0x20              ;1157
000084  230e              MOVS     r3,#0xe               ;1158
000086  e00d              B        |L15.164|
                  |L15.136|
000088  2128              MOVS     r1,#0x28              ;1162
00008a  230f              MOVS     r3,#0xf               ;1163
00008c  e00a              B        |L15.164|
                  |L15.142|
;;;1170                   }
;;;1171   
;;;1172                   break;
;;;1173   
;;;1174               case UI2C_PROTSTS_NACKIF_Msk:
;;;1175                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00008e  2701              MOVS     r7,#1
000090  490e              LDR      r1,|L15.204|
000092  02bf              LSLS     r7,r7,#10
000094  624f              STR      r7,[r1,#0x24]
;;;1176   
;;;1177                   if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000096  2b0c              CMP      r3,#0xc
000098  d00f              BEQ      |L15.186|
;;;1178                   {
;;;1179                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1180                       u8Err = 1;
;;;1181                   }
;;;1182                   else
;;;1183                   {
;;;1184                       u8rData = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
00009a  6b41              LDR      r1,[r0,#0x34]
00009c  b2cd              UXTB     r5,r1
;;;1185                       u8Ctrl = I2C_CTL_STO_SI;
00009e  2118              MOVS     r1,#0x18
;;;1186                       u8Xfering = 0;
0000a0  2200              MOVS     r2,#0
0000a2  4694              MOV      r12,r2
                  |L15.164|
;;;1187                   }
;;;1188   
;;;1189                   break;
;;;1190   
;;;1191               case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1192               default:                                                        /* Unknow status */
;;;1193                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1194                   u8Err = 1;
;;;1195                   break;
;;;1196           }
;;;1197   
;;;1198           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000a4  6dc7              LDR      r7,[r0,#0x5c]
0000a6  222e              MOVS     r2,#0x2e
0000a8  4397              BICS     r7,r7,r2
0000aa  430f              ORRS     r7,r7,r1
0000ac  65c7              STR      r7,[r0,#0x5c]
0000ae  4661              MOV      r1,r12                ;1128
0000b0  2900              CMP      r1,#0                 ;1128
0000b2  d005              BEQ      |L15.192|
0000b4  2c00              CMP      r4,#0                 ;1128
0000b6  d0b1              BEQ      |L15.28|
0000b8  e004              B        |L15.196|
                  |L15.186|
0000ba  2124              MOVS     r1,#0x24              ;1179
0000bc  2401              MOVS     r4,#1                 ;1180
0000be  e7f1              B        |L15.164|
                  |L15.192|
;;;1199       }
;;;1200   
;;;1201       if (u8Err)
0000c0  2c00              CMP      r4,#0
0000c2  d000              BEQ      |L15.198|
                  |L15.196|
;;;1202           u8rData = 0;                                                 /* If occurs error, return 0 */
0000c4  2500              MOVS     r5,#0
                  |L15.198|
;;;1203   
;;;1204       return u8rData;                                                  /* Return read data */
0000c6  4628              MOV      r0,r5
;;;1205   }
0000c8  bdf0              POP      {r4-r7,pc}
;;;1206   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L15.204|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadByteTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_ReadByteTwoRegs PROC
;;;1327     */
;;;1328   uint8_t UI2C_ReadByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1329   {
000002  4696              MOV      lr,r2
000004  460a              MOV      r2,r1
;;;1330       uint8_t u8Xfering = 1, u8Err = 0, u8rData = 0, u8Ctrl = 0;
000006  2500              MOVS     r5,#0
000008  2101              MOVS     r1,#1
;;;1331       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1332   
;;;1333       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  468c              MOV      r12,r1                ;1330
00000e  462e              MOV      r6,r5                 ;1330
000010  462c              MOV      r4,r5                 ;1330
000012  2312              MOVS     r3,#0x12              ;1331
000014  2120              MOVS     r1,#0x20
000016  438f              BICS     r7,r7,r1
000018  2108              MOVS     r1,#8
00001a  430f              ORRS     r7,r7,r1
00001c  65c7              STR      r7,[r0,#0x5c]
;;;1334   
;;;1335       while (u8Xfering && (u8Err == 0))
;;;1336       {
;;;1337           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1338   
;;;1339           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1340           {
;;;1341               case UI2C_PROTSTS_STARIF_Msk:
;;;1342                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1343   
;;;1344                   if (eEvent == MASTER_SEND_START)
;;;1345                   {
;;;1346                       UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);        /* Write SLA+W to Register UI2C_TXDAT */
00001e  0051              LSLS     r1,r2,#1
                  |L16.32|
000020  6e47              LDR      r7,[r0,#0x64]         ;1337
000022  04bf              LSLS     r7,r7,#18             ;1337
000024  0ebf              LSRS     r7,r7,#26             ;1337
000026  d0fb              BEQ      |L16.32|
000028  6e47              LDR      r7,[r0,#0x64]         ;1339
00002a  223f              MOVS     r2,#0x3f              ;1339
00002c  0212              LSLS     r2,r2,#8              ;1339
00002e  4017              ANDS     r7,r7,r2              ;1339
000030  3fff              SUBS     r7,r7,#0xff           ;1339
000032  1e7f              SUBS     r7,r7,#1              ;1339
000034  d014              BEQ      |L16.96|
000036  2203              MOVS     r2,#3                 ;1339
000038  0212              LSLS     r2,r2,#8              ;1339
00003a  1abf              SUBS     r7,r7,r2              ;1339
00003c  d030              BEQ      |L16.160|
00003e  2207              MOVS     r2,#7                 ;1339
000040  0292              LSLS     r2,r2,#10             ;1339
000042  4297              CMP      r7,r2                 ;1339
000044  d146              BNE      |L16.212|
;;;1347                       eEvent = MASTER_SEND_ADDRESS;
;;;1348                   }
;;;1349                   else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1350                   {
;;;1351                       UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1352                       eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1353                   }
;;;1354   
;;;1355                   u8Ctrl = UI2C_CTL_PTRG;
;;;1356                   break;
;;;1357   
;;;1358               case UI2C_PROTSTS_ACKIF_Msk:
;;;1359                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000046  2201              MOVS     r2,#1
000048  4f26              LDR      r7,|L16.228|
00004a  0352              LSLS     r2,r2,#13
00004c  627a              STR      r2,[r7,#0x24]
;;;1360   
;;;1361                   if (eEvent == MASTER_SEND_ADDRESS)
00004e  2b0a              CMP      r3,#0xa
000050  d019              BEQ      |L16.134|
;;;1362                   {
;;;1363                       UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte address of register */
;;;1364                       eEvent = MASTER_SEND_H_WR_ADDRESS;
;;;1365                   }
;;;1366                   else if (eEvent == MASTER_SEND_H_WR_ADDRESS)
000052  2b0b              CMP      r3,#0xb
000054  d01c              BEQ      |L16.144|
;;;1367                   {
;;;1368                       UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));       /* Write Lo byte address of register */
;;;1369                       eEvent = MASTER_SEND_L_ADDRESS;
;;;1370                   }
;;;1371                   else if (eEvent == MASTER_SEND_L_ADDRESS)
000056  2b0d              CMP      r3,#0xd
000058  d01f              BEQ      |L16.154|
;;;1372                   {
;;;1373                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1374                       eEvent = MASTER_SEND_REPEAT_START;
;;;1375                   }
;;;1376                   else
;;;1377                   {
;;;1378                       /* SLA+R ACK */
;;;1379                       u8Ctrl = UI2C_CTL_PTRG;
00005a  2420              MOVS     r4,#0x20
;;;1380                       eEvent = MASTER_READ_DATA;
00005c  2310              MOVS     r3,#0x10
00005e  e02e              B        |L16.190|
                  |L16.96|
000060  27ff              MOVS     r7,#0xff              ;1342
000062  4c20              LDR      r4,|L16.228|
000064  3701              ADDS     r7,#1                 ;1342
000066  6267              STR      r7,[r4,#0x24]         ;1342
000068  2b12              CMP      r3,#0x12              ;1344
00006a  d002              BEQ      |L16.114|
00006c  2b0f              CMP      r3,#0xf               ;1349
00006e  d003              BEQ      |L16.120|
000070  e007              B        |L16.130|
                  |L16.114|
000072  6301              STR      r1,[r0,#0x30]         ;1346
000074  230a              MOVS     r3,#0xa               ;1347
000076  e004              B        |L16.130|
                  |L16.120|
000078  4b1a              LDR      r3,|L16.228|
00007a  1c4a              ADDS     r2,r1,#1              ;1351
00007c  3b40              SUBS     r3,r3,#0x40           ;1351
00007e  631a              STR      r2,[r3,#0x30]         ;1351
000080  230c              MOVS     r3,#0xc               ;1352
                  |L16.130|
000082  2420              MOVS     r4,#0x20              ;1355
000084  e01b              B        |L16.190|
                  |L16.134|
000086  4672              MOV      r2,lr                 ;1363
000088  0a12              LSRS     r2,r2,#8              ;1363
00008a  6302              STR      r2,[r0,#0x30]         ;1363
00008c  230b              MOVS     r3,#0xb               ;1364
00008e  e016              B        |L16.190|
                  |L16.144|
000090  4672              MOV      r2,lr                 ;1368
000092  b2d2              UXTB     r2,r2                 ;1368
000094  6302              STR      r2,[r0,#0x30]         ;1368
000096  230d              MOVS     r3,#0xd               ;1369
000098  e011              B        |L16.190|
                  |L16.154|
00009a  2428              MOVS     r4,#0x28              ;1373
00009c  230f              MOVS     r3,#0xf               ;1374
00009e  e00e              B        |L16.190|
                  |L16.160|
;;;1381                   }
;;;1382   
;;;1383                   break;
;;;1384   
;;;1385               case UI2C_PROTSTS_NACKIF_Msk:
;;;1386                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000a0  2701              MOVS     r7,#1
0000a2  4c10              LDR      r4,|L16.228|
0000a4  02bf              LSLS     r7,r7,#10
0000a6  6267              STR      r7,[r4,#0x24]
;;;1387   
;;;1388                   if ((eEvent == MASTER_SEND_H_RD_ADDRESS) || (eEvent == MASTER_SEND_H_WR_ADDRESS) || (eEvent == MASTER_SEND_L_ADDRESS))
0000a8  2b0c              CMP      r3,#0xc
0000aa  d013              BEQ      |L16.212|
0000ac  2b0b              CMP      r3,#0xb
0000ae  d011              BEQ      |L16.212|
0000b0  2b0d              CMP      r3,#0xd
0000b2  d00f              BEQ      |L16.212|
;;;1389                   {
;;;1390                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1391                       u8Err = 1;
;;;1392                   }
;;;1393                   else
;;;1394                   {
;;;1395                       u8rData = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
0000b4  6b42              LDR      r2,[r0,#0x34]
;;;1396                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
0000b6  2424              MOVS     r4,#0x24
0000b8  b2d6              UXTB     r6,r2                 ;1395
;;;1397                       u8Xfering = 0;
0000ba  2200              MOVS     r2,#0
0000bc  4694              MOV      r12,r2
                  |L16.190|
;;;1398                   }
;;;1399   
;;;1400                   break;
;;;1401   
;;;1402               case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1403               default:                                                        /* Unknow status */
;;;1404                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1405                   u8Err = 1;
;;;1406                   break;
;;;1407           }
;;;1408   
;;;1409           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000be  6dc7              LDR      r7,[r0,#0x5c]
0000c0  222e              MOVS     r2,#0x2e
0000c2  4397              BICS     r7,r7,r2
0000c4  4327              ORRS     r7,r7,r4
0000c6  65c7              STR      r7,[r0,#0x5c]
0000c8  4662              MOV      r2,r12                ;1335
0000ca  2a00              CMP      r2,#0                 ;1335
0000cc  d005              BEQ      |L16.218|
0000ce  2d00              CMP      r5,#0                 ;1335
0000d0  d0a6              BEQ      |L16.32|
0000d2  e004              B        |L16.222|
                  |L16.212|
0000d4  2424              MOVS     r4,#0x24              ;1390
0000d6  2501              MOVS     r5,#1                 ;1391
0000d8  e7f1              B        |L16.190|
                  |L16.218|
;;;1410       }
;;;1411   
;;;1412       if (u8Err)
0000da  2d00              CMP      r5,#0
0000dc  d000              BEQ      |L16.224|
                  |L16.222|
;;;1413           u8rData = 0;                                                 /* If occurs error, return 0 */
0000de  2600              MOVS     r6,#0
                  |L16.224|
;;;1414   
;;;1415       return u8rData;                                                  /* Return read data */
0000e0  4630              MOV      r0,r6
;;;1416   }
0000e2  bdf0              POP      {r4-r7,pc}
;;;1417   
                          ENDP

                  |L16.228|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadMultiBytes||, CODE, READONLY, ALIGN=2

                  UI2C_ReadMultiBytes PROC
;;;1035     */
;;;1036   uint32_t UI2C_ReadMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t *pu8rData, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1037   {
000002  4694              MOV      r12,r2
;;;1038       uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000004  2600              MOVS     r6,#0
000006  2701              MOVS     r7,#1
;;;1039       uint32_t u32rxLen = 0;
;;;1040       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1041   
;;;1042       UI2C_START(ui2c);                                                       /* Send START */
000008  6dc2              LDR      r2,[r0,#0x5c]
00000a  468e              MOV      lr,r1                 ;1037
00000c  4633              MOV      r3,r6                 ;1039
00000e  2512              MOVS     r5,#0x12              ;1040
000010  2420              MOVS     r4,#0x20
000012  43a2              BICS     r2,r2,r4
000014  2408              MOVS     r4,#8
000016  4322              ORRS     r2,r2,r4
000018  65c2              STR      r2,[r0,#0x5c]
                  |L17.26|
;;;1043   
;;;1044       while (u8Xfering && (u8Err == 0))
;;;1045       {
;;;1046           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L17.26|
;;;1047   
;;;1048           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000022  6e42              LDR      r2,[r0,#0x64]
000024  243f              MOVS     r4,#0x3f
000026  0224              LSLS     r4,r4,#8
000028  4022              ANDS     r2,r2,r4
00002a  3aff              SUBS     r2,r2,#0xff
00002c  1e52              SUBS     r2,r2,#1
00002e  d017              BEQ      |L17.96|
000030  2403              MOVS     r4,#3
000032  0224              LSLS     r4,r4,#8
000034  1b12              SUBS     r2,r2,r4
000036  d021              BEQ      |L17.124|
000038  2407              MOVS     r4,#7
00003a  02a4              LSLS     r4,r4,#10
00003c  42a2              CMP      r2,r4
00003e  d135              BNE      |L17.172|
;;;1049           {
;;;1050               case UI2C_PROTSTS_STARIF_Msk:
;;;1051                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1052                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x01);             /* Write SLA+R to Register UI2C_TXDAT */
;;;1053                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1054                   u8Ctrl = UI2C_CTL_PTRG;
;;;1055                   break;
;;;1056   
;;;1057               case UI2C_PROTSTS_ACKIF_Msk:
;;;1058                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000040  2401              MOVS     r4,#1
000042  4a1c              LDR      r2,|L17.180|
000044  0364              LSLS     r4,r4,#13
000046  6254              STR      r4,[r2,#0x24]
;;;1059   
;;;1060                   if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000048  2d0c              CMP      r5,#0xc
00004a  d014              BEQ      |L17.118|
;;;1061                   {
;;;1062                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1063                       eEvent = MASTER_READ_DATA;
;;;1064                   }
;;;1065                   else
;;;1066                   {
;;;1067                       pu8rData[u32rxLen++] = (unsigned char) UI2C_GET_DATA(ui2c);    /* Receive Data */
00004c  6b42              LDR      r2,[r0,#0x34]
00004e  4664              MOV      r4,r12
000050  54e2              STRB     r2,[r4,r3]
;;;1068   
;;;1069                       if (u32rxLen < (u32rLen - 1))
000052  9a03              LDR      r2,[sp,#0xc]
000054  1c5b              ADDS     r3,r3,#1
000056  1e52              SUBS     r2,r2,#1
000058  4293              CMP      r3,r2
00005a  d20a              BCS      |L17.114|
;;;1070                           u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
00005c  2422              MOVS     r4,#0x22
00005e  e019              B        |L17.148|
                  |L17.96|
000060  22ff              MOVS     r2,#0xff              ;1051
000062  4914              LDR      r1,|L17.180|
000064  3201              ADDS     r2,#1                 ;1051
000066  624a              STR      r2,[r1,#0x24]         ;1051
000068  4671              MOV      r1,lr                 ;1052
00006a  0049              LSLS     r1,r1,#1              ;1052
00006c  1c49              ADDS     r1,r1,#1              ;1052
00006e  6301              STR      r1,[r0,#0x30]         ;1052
000070  250c              MOVS     r5,#0xc               ;1053
                  |L17.114|
;;;1071                       else
;;;1072                           u8Ctrl = UI2C_CTL_PTRG;
000072  2420              MOVS     r4,#0x20
000074  e00e              B        |L17.148|
                  |L17.118|
000076  2422              MOVS     r4,#0x22              ;1062
000078  2510              MOVS     r5,#0x10              ;1063
00007a  e00b              B        |L17.148|
                  |L17.124|
;;;1073                   }
;;;1074   
;;;1075                   break;
;;;1076   
;;;1077               case UI2C_PROTSTS_NACKIF_Msk:
;;;1078                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00007c  2401              MOVS     r4,#1
00007e  4a0d              LDR      r2,|L17.180|
000080  02a4              LSLS     r4,r4,#10
000082  6254              STR      r4,[r2,#0x24]
;;;1079   
;;;1080                   if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000084  2d0c              CMP      r5,#0xc
000086  d011              BEQ      |L17.172|
;;;1081                   {
;;;1082                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1083                       u8Err = 1;
;;;1084                   }
;;;1085                   else
;;;1086                   {
;;;1087                       pu8rData[u32rxLen++] = (unsigned char) UI2C_GET_DATA(ui2c);    /* Receive Data */
000088  6b41              LDR      r1,[r0,#0x34]
00008a  4662              MOV      r2,r12
00008c  54d1              STRB     r1,[r2,r3]
;;;1088                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
00008e  2424              MOVS     r4,#0x24
;;;1089                       u8Xfering = 0;
000090  2700              MOVS     r7,#0
000092  1c5b              ADDS     r3,r3,#1
                  |L17.148|
;;;1090                   }
;;;1091   
;;;1092                   break;
;;;1093   
;;;1094               case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1095               default:                                                        /* Unknow status */
;;;1096                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1097                   u8Err = 1;
;;;1098                   break;
;;;1099           }
;;;1100   
;;;1101           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000094  6dc1              LDR      r1,[r0,#0x5c]
000096  222e              MOVS     r2,#0x2e
000098  4391              BICS     r1,r1,r2
00009a  4321              ORRS     r1,r1,r4
00009c  65c1              STR      r1,[r0,#0x5c]
00009e  2f00              CMP      r7,#0                 ;1044
0000a0  d001              BEQ      |L17.166|
0000a2  2e00              CMP      r6,#0                 ;1044
0000a4  d0b9              BEQ      |L17.26|
                  |L17.166|
;;;1102       }
;;;1103   
;;;1104       return u32rxLen;                                                        /* Return bytes length that have been received */
0000a6  4618              MOV      r0,r3
;;;1105   }
0000a8  b004              ADD      sp,sp,#0x10
0000aa  bdf0              POP      {r4-r7,pc}
                  |L17.172|
0000ac  2424              MOVS     r4,#0x24              ;1082
0000ae  2601              MOVS     r6,#1                 ;1083
0000b0  e7f0              B        |L17.148|
;;;1106   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L17.180|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadMultiBytesOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_ReadMultiBytesOneReg PROC
;;;1221     */
;;;1222   uint32_t UI2C_ReadMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t *pu8rData, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1223   {
000002  469e              MOV      lr,r3
;;;1224       uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000004  2201              MOVS     r2,#1
000006  2500              MOVS     r5,#0
000008  4694              MOV      r12,r2
;;;1225       uint32_t u32rxLen = 0;
;;;1226       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1227   
;;;1228       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc3              LDR      r3,[r0,#0x5c]
00000c  462c              MOV      r4,r5                 ;1225
00000e  2212              MOVS     r2,#0x12              ;1226
000010  2620              MOVS     r6,#0x20
000012  43b3              BICS     r3,r3,r6
000014  2608              MOVS     r6,#8
000016  4333              ORRS     r3,r3,r6
000018  65c3              STR      r3,[r0,#0x5c]
;;;1229   
;;;1230       while (u8Xfering && (u8Err == 0))
;;;1231       {
;;;1232           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1233   
;;;1234           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1235           {
;;;1236               case UI2C_PROTSTS_STARIF_Msk:
;;;1237                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1238   
;;;1239                   if (eEvent == MASTER_SEND_START)
;;;1240                   {
;;;1241                       UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);         /* Write SLA+W to Register UI2C_TXDAT */
00001a  004e              LSLS     r6,r1,#1
                  |L18.28|
00001c  6e41              LDR      r1,[r0,#0x64]         ;1232
00001e  0489              LSLS     r1,r1,#18             ;1232
000020  0e89              LSRS     r1,r1,#26             ;1232
000022  d0fb              BEQ      |L18.28|
000024  6e41              LDR      r1,[r0,#0x64]         ;1234
000026  273f              MOVS     r7,#0x3f              ;1234
000028  023f              LSLS     r7,r7,#8              ;1234
00002a  4039              ANDS     r1,r1,r7              ;1234
00002c  39ff              SUBS     r1,r1,#0xff           ;1234
00002e  1e49              SUBS     r1,r1,#1              ;1234
000030  d01b              BEQ      |L18.106|
000032  2703              MOVS     r7,#3                 ;1234
000034  023f              LSLS     r7,r7,#8              ;1234
000036  1bc9              SUBS     r1,r1,r7              ;1234
000038  d035              BEQ      |L18.166|
00003a  2707              MOVS     r7,#7                 ;1234
00003c  02bf              LSLS     r7,r7,#10             ;1234
00003e  42b9              CMP      r1,r7                 ;1234
000040  d14b              BNE      |L18.218|
;;;1242                       eEvent = MASTER_SEND_ADDRESS;
;;;1243                   }
;;;1244                   else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1245                   {
;;;1246                       UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1247                       eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1248                   }
;;;1249   
;;;1250                   u8Ctrl = UI2C_CTL_PTRG;
;;;1251                   break;
;;;1252   
;;;1253               case UI2C_PROTSTS_ACKIF_Msk:
;;;1254                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  4926              LDR      r1,|L18.224|
000046  037f              LSLS     r7,r7,#13
000048  624f              STR      r7,[r1,#0x24]
;;;1255   
;;;1256                   if (eEvent == MASTER_SEND_ADDRESS)
00004a  2a0a              CMP      r2,#0xa
00004c  d020              BEQ      |L18.144|
;;;1257                   {
;;;1258                       UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address of register */
;;;1259                       u8Ctrl = UI2C_CTL_PTRG;
;;;1260                       eEvent = MASTER_SEND_DATA;
;;;1261                   }
;;;1262                   else if (eEvent == MASTER_SEND_DATA)
00004e  2a0e              CMP      r2,#0xe
000050  d023              BEQ      |L18.154|
;;;1263                   {
;;;1264                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1265                       eEvent = MASTER_SEND_REPEAT_START;
;;;1266                   }
;;;1267                   else if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000052  2a0c              CMP      r2,#0xc
000054  d024              BEQ      |L18.160|
;;;1268                   {
;;;1269                       /* SLA+R ACK */
;;;1270                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1271                       eEvent = MASTER_READ_DATA;
;;;1272                   }
;;;1273                   else
;;;1274                   {
;;;1275                       pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
000056  6b41              LDR      r1,[r0,#0x34]
000058  4673              MOV      r3,lr
00005a  5519              STRB     r1,[r3,r4]
;;;1276   
;;;1277                       if (u32rxLen < u32rLen - 1)
00005c  9909              LDR      r1,[sp,#0x24]
00005e  1c64              ADDS     r4,r4,#1
000060  1e49              SUBS     r1,r1,#1
000062  428c              CMP      r4,r1
000064  d212              BCS      |L18.140|
;;;1278                           u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
000066  2122              MOVS     r1,#0x22
000068  e02a              B        |L18.192|
                  |L18.106|
00006a  27ff              MOVS     r7,#0xff              ;1237
00006c  491c              LDR      r1,|L18.224|
00006e  3701              ADDS     r7,#1                 ;1237
000070  624f              STR      r7,[r1,#0x24]         ;1237
000072  2a12              CMP      r2,#0x12              ;1239
000074  d002              BEQ      |L18.124|
000076  2a0f              CMP      r2,#0xf               ;1244
000078  d003              BEQ      |L18.130|
00007a  e007              B        |L18.140|
                  |L18.124|
00007c  6306              STR      r6,[r0,#0x30]         ;1241
00007e  220a              MOVS     r2,#0xa               ;1242
000080  e004              B        |L18.140|
                  |L18.130|
000082  4a17              LDR      r2,|L18.224|
000084  1c71              ADDS     r1,r6,#1              ;1246
000086  3a40              SUBS     r2,r2,#0x40           ;1246
000088  6311              STR      r1,[r2,#0x30]         ;1246
00008a  220c              MOVS     r2,#0xc               ;1247
                  |L18.140|
;;;1279                       else
;;;1280                           u8Ctrl = UI2C_CTL_PTRG;
00008c  2120              MOVS     r1,#0x20
00008e  e017              B        |L18.192|
                  |L18.144|
000090  9902              LDR      r1,[sp,#8]            ;1258
000092  6301              STR      r1,[r0,#0x30]         ;1258
000094  2120              MOVS     r1,#0x20              ;1259
000096  220e              MOVS     r2,#0xe               ;1260
000098  e012              B        |L18.192|
                  |L18.154|
00009a  2128              MOVS     r1,#0x28              ;1264
00009c  220f              MOVS     r2,#0xf               ;1265
00009e  e00f              B        |L18.192|
                  |L18.160|
0000a0  2122              MOVS     r1,#0x22              ;1270
0000a2  2210              MOVS     r2,#0x10              ;1271
0000a4  e00c              B        |L18.192|
                  |L18.166|
;;;1281                   }
;;;1282   
;;;1283                   break;
;;;1284   
;;;1285               case UI2C_PROTSTS_NACKIF_Msk:
;;;1286                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000a6  2701              MOVS     r7,#1
0000a8  490d              LDR      r1,|L18.224|
0000aa  02bf              LSLS     r7,r7,#10
0000ac  624f              STR      r7,[r1,#0x24]
;;;1287   
;;;1288                   if (eEvent == MASTER_SEND_H_RD_ADDRESS)
0000ae  2a0c              CMP      r2,#0xc
0000b0  d013              BEQ      |L18.218|
;;;1289                   {
;;;1290                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1291                       u8Err = 1;
;;;1292                   }
;;;1293                   else
;;;1294                   {
;;;1295                       pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
0000b2  6b41              LDR      r1,[r0,#0x34]
0000b4  4673              MOV      r3,lr
0000b6  5519              STRB     r1,[r3,r4]
;;;1296                       u8Ctrl = I2C_CTL_STO_SI;
;;;1297                       u8Xfering = 0;
0000b8  2300              MOVS     r3,#0
0000ba  2118              MOVS     r1,#0x18              ;1296
0000bc  469c              MOV      r12,r3
0000be  1c64              ADDS     r4,r4,#1
                  |L18.192|
;;;1298                   }
;;;1299   
;;;1300                   break;
;;;1301   
;;;1302               case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1303               default:                                                        /* Unknow status */
;;;1304                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1305                   u8Err = 1;
;;;1306                   break;
;;;1307           }
;;;1308   
;;;1309           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000c0  6dc7              LDR      r7,[r0,#0x5c]
0000c2  232e              MOVS     r3,#0x2e
0000c4  439f              BICS     r7,r7,r3
0000c6  430f              ORRS     r7,r7,r1
0000c8  65c7              STR      r7,[r0,#0x5c]
0000ca  4661              MOV      r1,r12                ;1230
0000cc  2900              CMP      r1,#0                 ;1230
0000ce  d001              BEQ      |L18.212|
0000d0  2d00              CMP      r5,#0                 ;1230
0000d2  d0a3              BEQ      |L18.28|
                  |L18.212|
;;;1310       }
;;;1311   
;;;1312       return u32rxLen;                                               /* Return bytes length that have been received */
0000d4  4620              MOV      r0,r4
;;;1313   }
0000d6  b004              ADD      sp,sp,#0x10
0000d8  bdf0              POP      {r4-r7,pc}
                  |L18.218|
0000da  2124              MOVS     r1,#0x24              ;1290
0000dc  2501              MOVS     r5,#1                 ;1291
0000de  e7ef              B        |L18.192|
;;;1314   
                          ENDP

                  |L18.224|
                          DCD      0x40070040

                          AREA ||i.UI2C_ReadMultiBytesTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_ReadMultiBytesTwoRegs PROC
;;;1432     */
;;;1433   uint32_t UI2C_ReadMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t *pu8rData, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1434   {
000002  4696              MOV      lr,r2
000004  460a              MOV      r2,r1
;;;1435       uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000006  2600              MOVS     r6,#0
000008  2101              MOVS     r1,#1
;;;1436       uint32_t u32rxLen = 0;
;;;1437       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1438   
;;;1439       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  468c              MOV      r12,r1                ;1435
00000e  4634              MOV      r4,r6                 ;1435
000010  4635              MOV      r5,r6                 ;1436
000012  2312              MOVS     r3,#0x12              ;1437
000014  2120              MOVS     r1,#0x20
000016  438f              BICS     r7,r7,r1
000018  2108              MOVS     r1,#8
00001a  430f              ORRS     r7,r7,r1
00001c  65c7              STR      r7,[r0,#0x5c]
;;;1440   
;;;1441       while (u8Xfering && (u8Err == 0))
;;;1442       {
;;;1443           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;1444   
;;;1445           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;1446           {
;;;1447               case UI2C_PROTSTS_STARIF_Msk:
;;;1448                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1449   
;;;1450                   if (eEvent == MASTER_SEND_START)
;;;1451                   {
;;;1452                       UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);         /* Write SLA+W to Register UI2C_TXDAT */
00001e  0051              LSLS     r1,r2,#1
                  |L19.32|
000020  6e47              LDR      r7,[r0,#0x64]         ;1443
000022  04bf              LSLS     r7,r7,#18             ;1443
000024  0ebf              LSRS     r7,r7,#26             ;1443
000026  d0fb              BEQ      |L19.32|
000028  6e47              LDR      r7,[r0,#0x64]         ;1445
00002a  223f              MOVS     r2,#0x3f              ;1445
00002c  0212              LSLS     r2,r2,#8              ;1445
00002e  4017              ANDS     r7,r7,r2              ;1445
000030  3fff              SUBS     r7,r7,#0xff           ;1445
000032  1e7f              SUBS     r7,r7,#1              ;1445
000034  d01d              BEQ      |L19.114|
000036  2203              MOVS     r2,#3                 ;1445
000038  0212              LSLS     r2,r2,#8              ;1445
00003a  1abf              SUBS     r7,r7,r2              ;1445
00003c  d03c              BEQ      |L19.184|
00003e  2207              MOVS     r2,#7                 ;1445
000040  0292              LSLS     r2,r2,#10             ;1445
000042  4297              CMP      r7,r2                 ;1445
000044  d156              BNE      |L19.244|
;;;1453                       eEvent = MASTER_SEND_ADDRESS;
;;;1454                   }
;;;1455                   else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1456                   {
;;;1457                       UI2C_SET_DATA(UI2C0, (u8SlaveAddr << 1) | 0x01);        /* Write SLA+R to Register TXDAT */
;;;1458                       eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1459                   }
;;;1460   
;;;1461                   u8Ctrl = UI2C_CTL_PTRG;
;;;1462                   break;
;;;1463   
;;;1464               case UI2C_PROTSTS_ACKIF_Msk:
;;;1465                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000046  2201              MOVS     r2,#1
000048  4f2c              LDR      r7,|L19.252|
00004a  0352              LSLS     r2,r2,#13
00004c  627a              STR      r2,[r7,#0x24]
;;;1466   
;;;1467                   if (eEvent == MASTER_SEND_ADDRESS)
00004e  2b0a              CMP      r3,#0xa
000050  d022              BEQ      |L19.152|
;;;1468                   {
;;;1469                       UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte address of register */
;;;1470                       eEvent = MASTER_SEND_H_WR_ADDRESS;
;;;1471                   }
;;;1472                   else if (eEvent == MASTER_SEND_H_WR_ADDRESS)
000052  2b0b              CMP      r3,#0xb
000054  d025              BEQ      |L19.162|
;;;1473                   {
;;;1474                       UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));       /* Write Lo byte address of register */
;;;1475                       eEvent = MASTER_SEND_L_ADDRESS;
;;;1476                   }
;;;1477                   else if (eEvent == MASTER_SEND_L_ADDRESS)
000056  2b0d              CMP      r3,#0xd
000058  d028              BEQ      |L19.172|
;;;1478                   {
;;;1479                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1480                       eEvent = MASTER_SEND_REPEAT_START;
;;;1481                   }
;;;1482                   else if (eEvent == MASTER_SEND_H_RD_ADDRESS)
00005a  2b0c              CMP      r3,#0xc
00005c  d029              BEQ      |L19.178|
;;;1483                   {
;;;1484                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1485                       eEvent = MASTER_READ_DATA;
;;;1486                   }
;;;1487                   else
;;;1488                   {
;;;1489                       pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
00005e  6b44              LDR      r4,[r0,#0x34]
000060  9f03              LDR      r7,[sp,#0xc]
000062  557c              STRB     r4,[r7,r5]
;;;1490   
;;;1491                       if (u32rxLen < u32rLen - 1)
000064  9c09              LDR      r4,[sp,#0x24]
000066  1c6d              ADDS     r5,r5,#1
000068  1e64              SUBS     r4,r4,#1
00006a  42a5              CMP      r5,r4
00006c  d212              BCS      |L19.148|
;;;1492                           u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
00006e  2422              MOVS     r4,#0x22
000070  e033              B        |L19.218|
                  |L19.114|
000072  27ff              MOVS     r7,#0xff              ;1448
000074  4c21              LDR      r4,|L19.252|
000076  3701              ADDS     r7,#1                 ;1448
000078  6267              STR      r7,[r4,#0x24]         ;1448
00007a  2b12              CMP      r3,#0x12              ;1450
00007c  d002              BEQ      |L19.132|
00007e  2b0f              CMP      r3,#0xf               ;1455
000080  d003              BEQ      |L19.138|
000082  e007              B        |L19.148|
                  |L19.132|
000084  6301              STR      r1,[r0,#0x30]         ;1452
000086  230a              MOVS     r3,#0xa               ;1453
000088  e004              B        |L19.148|
                  |L19.138|
00008a  4b1c              LDR      r3,|L19.252|
00008c  1c4a              ADDS     r2,r1,#1              ;1457
00008e  3b40              SUBS     r3,r3,#0x40           ;1457
000090  631a              STR      r2,[r3,#0x30]         ;1457
000092  230c              MOVS     r3,#0xc               ;1458
                  |L19.148|
;;;1493                       else
;;;1494                           u8Ctrl = UI2C_CTL_PTRG;
000094  2420              MOVS     r4,#0x20
000096  e020              B        |L19.218|
                  |L19.152|
000098  4672              MOV      r2,lr                 ;1469
00009a  0a12              LSRS     r2,r2,#8              ;1469
00009c  6302              STR      r2,[r0,#0x30]         ;1469
00009e  230b              MOVS     r3,#0xb               ;1470
0000a0  e01b              B        |L19.218|
                  |L19.162|
0000a2  4672              MOV      r2,lr                 ;1474
0000a4  b2d2              UXTB     r2,r2                 ;1474
0000a6  6302              STR      r2,[r0,#0x30]         ;1474
0000a8  230d              MOVS     r3,#0xd               ;1475
0000aa  e016              B        |L19.218|
                  |L19.172|
0000ac  2428              MOVS     r4,#0x28              ;1479
0000ae  230f              MOVS     r3,#0xf               ;1480
0000b0  e013              B        |L19.218|
                  |L19.178|
0000b2  2422              MOVS     r4,#0x22              ;1484
0000b4  2310              MOVS     r3,#0x10              ;1485
0000b6  e010              B        |L19.218|
                  |L19.184|
;;;1495                   }
;;;1496   
;;;1497                   break;
;;;1498   
;;;1499               case UI2C_PROTSTS_NACKIF_Msk:
;;;1500                   UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000b8  2701              MOVS     r7,#1
0000ba  4c10              LDR      r4,|L19.252|
0000bc  02bf              LSLS     r7,r7,#10
0000be  6267              STR      r7,[r4,#0x24]
;;;1501   
;;;1502                   if ((eEvent == MASTER_SEND_H_RD_ADDRESS) || (eEvent == MASTER_SEND_H_WR_ADDRESS) || (eEvent == MASTER_SEND_L_ADDRESS))
0000c0  2b0c              CMP      r3,#0xc
0000c2  d017              BEQ      |L19.244|
0000c4  2b0b              CMP      r3,#0xb
0000c6  d015              BEQ      |L19.244|
0000c8  2b0d              CMP      r3,#0xd
0000ca  d013              BEQ      |L19.244|
;;;1503                   {
;;;1504                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1505                       u8Err = 1;
;;;1506                   }
;;;1507                   else
;;;1508                   {
;;;1509                       pu8rData[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
0000cc  6b42              LDR      r2,[r0,#0x34]
0000ce  9c03              LDR      r4,[sp,#0xc]
0000d0  5562              STRB     r2,[r4,r5]
;;;1510                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);
;;;1511                       u8Xfering = 0;
0000d2  2200              MOVS     r2,#0
0000d4  2424              MOVS     r4,#0x24              ;1510
0000d6  4694              MOV      r12,r2
0000d8  1c6d              ADDS     r5,r5,#1
                  |L19.218|
;;;1512                   }
;;;1513   
;;;1514                   break;
;;;1515   
;;;1516               case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1517               default:                                                        /* Unknow status */
;;;1518                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1519                   u8Err = 1;
;;;1520                   break;
;;;1521           }
;;;1522   
;;;1523           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000da  6dc7              LDR      r7,[r0,#0x5c]
0000dc  222e              MOVS     r2,#0x2e
0000de  4397              BICS     r7,r7,r2
0000e0  4327              ORRS     r7,r7,r4
0000e2  65c7              STR      r7,[r0,#0x5c]
0000e4  4662              MOV      r2,r12                ;1441
0000e6  2a00              CMP      r2,#0                 ;1441
0000e8  d001              BEQ      |L19.238|
0000ea  2e00              CMP      r6,#0                 ;1441
0000ec  d098              BEQ      |L19.32|
                  |L19.238|
;;;1524       }
;;;1525   
;;;1526       return u32rxLen;                                                        /* Return bytes length that have been received */
0000ee  4628              MOV      r0,r5
;;;1527   }
0000f0  b004              ADD      sp,sp,#0x10
0000f2  bdf0              POP      {r4-r7,pc}
                  |L19.244|
0000f4  2424              MOVS     r4,#0x24              ;1504
0000f6  2601              MOVS     r6,#1                 ;1505
0000f8  e7ef              B        |L19.218|
;;;1528   
                          ENDP

0000fa  0000              DCW      0x0000
                  |L19.252|
                          DCD      0x40070040

                          AREA ||i.UI2C_SetBusClockFreq||, CODE, READONLY, ALIGN=2

                  UI2C_SetBusClockFreq PROC
;;;253     */
;;;254    uint32_t UI2C_SetBusClockFreq(UI2C_T *ui2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;255    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;256        uint32_t u32ClkDiv;
;;;257        uint32_t u32Pclk;
;;;258    
;;;259        u32Pclk = CLK_GetPCLK0Freq();
000006  f7fffffe          BL       CLK_GetPCLK0Freq
00000a  4605              MOV      r5,r0
;;;260    
;;;261        u32ClkDiv = (uint32_t)((((((u32Pclk / 2) * 10) / (u32BusClock)) + 5) / 10) - 1); /* Compute proper divider for USCI_I2C clock */
00000c  0840              LSRS     r0,r0,#1
00000e  210a              MOVS     r1,#0xa
000010  4348              MULS     r0,r1,r0
000012  4631              MOV      r1,r6
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  1d40              ADDS     r0,r0,#5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;262    
;;;263        /* Set USCI_I2C bus clock */
;;;264        ui2c->BRGEN &= ~UI2C_BRGEN_CLKDIV_Msk;
000020  68a1              LDR      r1,[r4,#8]
000022  4a07              LDR      r2,|L20.64|
000024  4011              ANDS     r1,r1,r2
000026  60a1              STR      r1,[r4,#8]
;;;265        ui2c->BRGEN |= (u32ClkDiv << UI2C_BRGEN_CLKDIV_Pos);
000028  68a1              LDR      r1,[r4,#8]
00002a  1e40              SUBS     r0,r0,#1
00002c  0402              LSLS     r2,r0,#16
00002e  4311              ORRS     r1,r1,r2
000030  60a1              STR      r1,[r4,#8]
;;;266    
;;;267        return (u32Pclk / ((u32ClkDiv + 1) << 1));
000032  0041              LSLS     r1,r0,#1
000034  4628              MOV      r0,r5
000036  1c89              ADDS     r1,r1,#2
000038  f7fffffe          BL       __aeabi_uidivmod
;;;268    }
00003c  bd70              POP      {r4-r6,pc}
;;;269    
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_SetData||, CODE, READONLY, ALIGN=1

                  UI2C_SetData PROC
;;;396     */
;;;397    void UI2C_SetData(UI2C_T *ui2c, uint8_t u8Data)
000000  6301              STR      r1,[r0,#0x30]
;;;398    {
;;;399        ui2c->TXDAT = u8Data;
;;;400    }
000002  4770              BX       lr
;;;401    
                          ENDP


                          AREA ||i.UI2C_SetSlaveAddr||, CODE, READONLY, ALIGN=1

                  UI2C_SetSlaveAddr PROC
;;;415     */
;;;416    void UI2C_SetSlaveAddr(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddr, uint8_t u8GCMode)
000000  2900              CMP      r1,#0
;;;417    {
000002  d001              BEQ      |L22.8|
;;;418        if (u8SlaveNo)
;;;419            ui2c->DEVADDR1  = u16SlaveAddr;
000004  6482              STR      r2,[r0,#0x48]
000006  e000              B        |L22.10|
                  |L22.8|
;;;420        else
;;;421            ui2c->DEVADDR0  = u16SlaveAddr;
000008  6442              STR      r2,[r0,#0x44]
                  |L22.10|
;;;422    
;;;423        ui2c->PROTCTL  = (ui2c->PROTCTL & ~UI2C_PROTCTL_GCFUNC_Msk) | u8GCMode;
00000a  6dc1              LDR      r1,[r0,#0x5c]
00000c  0849              LSRS     r1,r1,#1
00000e  0049              LSLS     r1,r1,#1
000010  4319              ORRS     r1,r1,r3
000012  65c1              STR      r1,[r0,#0x5c]
;;;424    }
000014  4770              BX       lr
;;;425    
                          ENDP


                          AREA ||i.UI2C_SetSlaveAddrMask||, CODE, READONLY, ALIGN=1

                  UI2C_SetSlaveAddrMask PROC
;;;437     */
;;;438    void UI2C_SetSlaveAddrMask(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddrMask)
000000  2900              CMP      r1,#0
;;;439    {
000002  d001              BEQ      |L23.8|
;;;440        if (u8SlaveNo)
;;;441            ui2c->ADDRMSK1  = u16SlaveAddrMask;
000004  6502              STR      r2,[r0,#0x50]
;;;442        else
;;;443            ui2c->ADDRMSK0  = u16SlaveAddrMask;
;;;444    }
000006  4770              BX       lr
                  |L23.8|
000008  64c2              STR      r2,[r0,#0x4c]         ;443
00000a  4770              BX       lr
;;;445    
                          ENDP


                          AREA ||i.UI2C_Trigger||, CODE, READONLY, ALIGN=1

                  UI2C_Trigger PROC
;;;104     */
;;;105    void UI2C_Trigger(UI2C_T *ui2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Ptrg, uint8_t u8Ack)
000000  b5f0              PUSH     {r4-r7,lr}
;;;106    {
;;;107        uint32_t u32Reg = 0;
;;;108        uint32_t u32Val = ui2c->PROTCTL & ~(UI2C_PROTCTL_STA_Msk | UI2C_PROTCTL_STO_Msk | UI2C_PROTCTL_AA_Msk);
000002  9e05              LDR      r6,[sp,#0x14]
000004  6dc5              LDR      r5,[r0,#0x5c]
000006  2400              MOVS     r4,#0                 ;107
000008  270e              MOVS     r7,#0xe
00000a  43bd              BICS     r5,r5,r7
;;;109    
;;;110        if (u8Start)
00000c  2900              CMP      r1,#0
00000e  d000              BEQ      |L24.18|
;;;111            u32Reg |= UI2C_PROTCTL_STA_Msk;
000010  2408              MOVS     r4,#8
                  |L24.18|
;;;112    
;;;113        if (u8Stop)
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L24.26|
;;;114            u32Reg |= UI2C_PROTCTL_STO_Msk;
000016  2104              MOVS     r1,#4
000018  430c              ORRS     r4,r4,r1
                  |L24.26|
;;;115    
;;;116        if (u8Ptrg)
00001a  2b00              CMP      r3,#0
00001c  d001              BEQ      |L24.34|
;;;117            u32Reg |= UI2C_PROTCTL_PTRG_Msk;
00001e  2120              MOVS     r1,#0x20
000020  430c              ORRS     r4,r4,r1
                  |L24.34|
;;;118    
;;;119        if (u8Ack)
000022  2e00              CMP      r6,#0
000024  d001              BEQ      |L24.42|
;;;120            u32Reg |= UI2C_PROTCTL_AA_Msk;
000026  2102              MOVS     r1,#2
000028  430c              ORRS     r4,r4,r1
                  |L24.42|
;;;121    
;;;122        ui2c->PROTCTL = u32Val | u32Reg;
00002a  4325              ORRS     r5,r5,r4
00002c  65c5              STR      r5,[r0,#0x5c]
;;;123    }
00002e  bdf0              POP      {r4-r7,pc}
;;;124    
                          ENDP


                          AREA ||i.UI2C_WriteByte||, CODE, READONLY, ALIGN=2

                  UI2C_WriteByte PROC
;;;521    
;;;522    uint8_t UI2C_WriteByte(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t u8Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;523    {
000002  468c              MOV      r12,r1
;;;524        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000004  2400              MOVS     r4,#0
000006  2601              MOVS     r6,#1
;;;525        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;526    
;;;527        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;523
00000c  4623              MOV      r3,r4                 ;524
00000e  2512              MOVS     r5,#0x12              ;525
000010  2720              MOVS     r7,#0x20
000012  43b9              BICS     r1,r1,r7
000014  2708              MOVS     r7,#8
000016  4339              ORRS     r1,r1,r7
000018  65c1              STR      r1,[r0,#0x5c]
;;;528    
;;;529        while (u8Xfering && (u8Err == 0))
;;;530        {
;;;531            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;532    
;;;533            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;534            {
;;;535                case UI2C_PROTSTS_STARIF_Msk:
;;;536                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  491d              LDR      r1,|L25.144|
                  |L25.28|
00001c  6e47              LDR      r7,[r0,#0x64]         ;531
00001e  04bf              LSLS     r7,r7,#18             ;531
000020  0ebf              LSRS     r7,r7,#26             ;531
000022  d0fb              BEQ      |L25.28|
000024  6e47              LDR      r7,[r0,#0x64]         ;533
000026  223f              MOVS     r2,#0x3f              ;533
000028  0212              LSLS     r2,r2,#8              ;533
00002a  4017              ANDS     r7,r7,r2              ;533
00002c  3fff              SUBS     r7,r7,#0xff           ;533
00002e  1e7f              SUBS     r7,r7,#1              ;533
000030  d00f              BEQ      |L25.82|
000032  2203              MOVS     r2,#3                 ;533
000034  0212              LSLS     r2,r2,#8              ;533
000036  1abf              SUBS     r7,r7,r2              ;533
000038  d018              BEQ      |L25.108|
00003a  2207              MOVS     r2,#7                 ;533
00003c  0292              LSLS     r2,r2,#10             ;533
00003e  4297              CMP      r7,r2                 ;533
000040  d117              BNE      |L25.114|
;;;537                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;538                    eEvent = MASTER_SEND_ADDRESS;
;;;539                    u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;540                    break;
;;;541    
;;;542                case UI2C_PROTSTS_ACKIF_Msk:
;;;543                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  037f              LSLS     r7,r7,#13
000046  624f              STR      r7,[r1,#0x24]
;;;544    
;;;545                    if (eEvent == MASTER_SEND_ADDRESS)
000048  2d0a              CMP      r5,#0xa
00004a  d00b              BEQ      |L25.100|
;;;546                    {
;;;547                        UI2C_SET_DATA(ui2c, u8Data);                              /* Write data to UI2C_TXDAT */
;;;548                        eEvent = MASTER_SEND_DATA;
;;;549                    }
;;;550                    else
;;;551                    {
;;;552                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
00004c  2324              MOVS     r3,#0x24
;;;553                        u8Xfering = 0;
00004e  2600              MOVS     r6,#0
000050  e011              B        |L25.118|
                  |L25.82|
000052  22ff              MOVS     r2,#0xff              ;536
000054  3201              ADDS     r2,#1                 ;536
000056  624a              STR      r2,[r1,#0x24]         ;536
000058  4662              MOV      r2,r12                ;537
00005a  0052              LSLS     r2,r2,#1              ;537
00005c  6302              STR      r2,[r0,#0x30]         ;537
00005e  250a              MOVS     r5,#0xa               ;538
000060  2320              MOVS     r3,#0x20              ;539
000062  e008              B        |L25.118|
                  |L25.100|
000064  4672              MOV      r2,lr                 ;547
000066  6302              STR      r2,[r0,#0x30]         ;547
000068  250e              MOVS     r5,#0xe               ;548
00006a  e004              B        |L25.118|
                  |L25.108|
;;;554                    }
;;;555    
;;;556                    break;
;;;557    
;;;558                case UI2C_PROTSTS_NACKIF_Msk:
;;;559                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00006c  2201              MOVS     r2,#1
00006e  0292              LSLS     r2,r2,#10
000070  624a              STR      r2,[r1,#0x24]
                  |L25.114|
;;;560                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;561                    u8Err = 1;
;;;562                    break;
;;;563    
;;;564                case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;565                default:                                                        /* Unknow status */
;;;566                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000072  2324              MOVS     r3,#0x24
;;;567                    u8Err = 1;
000074  2401              MOVS     r4,#1
                  |L25.118|
;;;568                    break;
;;;569            }
;;;570    
;;;571            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000076  6dc7              LDR      r7,[r0,#0x5c]
000078  222e              MOVS     r2,#0x2e
00007a  4397              BICS     r7,r7,r2
00007c  431f              ORRS     r7,r7,r3
00007e  65c7              STR      r7,[r0,#0x5c]
000080  2e00              CMP      r6,#0                 ;529
000082  d001              BEQ      |L25.136|
000084  2c00              CMP      r4,#0                 ;529
000086  d0c9              BEQ      |L25.28|
                  |L25.136|
000088  4620              MOV      r0,r4                 ;529
;;;572        }
;;;573    
;;;574        return (u8Err | u8Xfering);                                             /* return (Success)/(Fail) status */
00008a  4330              ORRS     r0,r0,r6
;;;575    }
00008c  bdf0              POP      {r4-r7,pc}
;;;576    
                          ENDP

00008e  0000              DCW      0x0000
                  |L25.144|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteByteOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_WriteByteOneReg PROC
;;;656    
;;;657    uint8_t UI2C_WriteByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t u8Data)
000000  b5ff              PUSH     {r0-r7,lr}
;;;658    {
;;;659        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2601              MOVS     r6,#1
000004  468c              MOV      r12,r1                ;658
000006  2500              MOVS     r5,#0
;;;660        uint32_t u32txLen = 0;
;;;661    
;;;662        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;658
00000c  462b              MOV      r3,r5                 ;659
00000e  462c              MOV      r4,r5                 ;660
000010  2720              MOVS     r7,#0x20
000012  43b9              BICS     r1,r1,r7
000014  2708              MOVS     r7,#8
000016  4339              ORRS     r1,r1,r7
000018  65c1              STR      r1,[r0,#0x5c]
;;;663    
;;;664        while (u8Xfering && (u8Err == 0))
;;;665        {
;;;666            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;667    
;;;668            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;669            {
;;;670                case UI2C_PROTSTS_STARIF_Msk:
;;;671                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  4920              LDR      r1,|L26.156|
                  |L26.28|
00001c  6e47              LDR      r7,[r0,#0x64]         ;666
00001e  04bf              LSLS     r7,r7,#18             ;666
000020  0ebf              LSRS     r7,r7,#26             ;666
000022  d0fb              BEQ      |L26.28|
000024  6e47              LDR      r7,[r0,#0x64]         ;668
000026  223f              MOVS     r2,#0x3f              ;668
000028  0212              LSLS     r2,r2,#8              ;668
00002a  4017              ANDS     r7,r7,r2              ;668
00002c  3fff              SUBS     r7,r7,#0xff           ;668
00002e  1e7f              SUBS     r7,r7,#1              ;668
000030  d011              BEQ      |L26.86|
000032  2203              MOVS     r2,#3                 ;668
000034  0212              LSLS     r2,r2,#8              ;668
000036  1abf              SUBS     r7,r7,r2              ;668
000038  d01d              BEQ      |L26.118|
00003a  2207              MOVS     r2,#7                 ;668
00003c  0292              LSLS     r2,r2,#10             ;668
00003e  4297              CMP      r7,r2                 ;668
000040  d11c              BNE      |L26.124|
;;;672                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;673                    u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;674                    break;
;;;675    
;;;676                case UI2C_PROTSTS_ACKIF_Msk:
;;;677                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2701              MOVS     r7,#1
000044  037f              LSLS     r7,r7,#13
000046  624f              STR      r7,[r1,#0x24]
;;;678    
;;;679                    if (u32txLen == 0)
000048  2c00              CMP      r4,#0
00004a  d00c              BEQ      |L26.102|
;;;680                    {
;;;681                        UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address to UI2C_TXDAT */
;;;682                        u32txLen++;
;;;683                    }
;;;684                    else if (u32txLen == 1)
00004c  2c01              CMP      r4,#1
00004e  d00e              BEQ      |L26.110|
;;;685                    {
;;;686                        UI2C_SET_DATA(ui2c, u8Data);                              /* Write data to UI2C_TXDAT */
;;;687                        u32txLen++;
;;;688                    }
;;;689                    else
;;;690                    {
;;;691                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000050  2324              MOVS     r3,#0x24
;;;692                        u8Xfering = 0;
000052  2600              MOVS     r6,#0
000054  e014              B        |L26.128|
                  |L26.86|
000056  22ff              MOVS     r2,#0xff              ;671
000058  3201              ADDS     r2,#1                 ;671
00005a  624a              STR      r2,[r1,#0x24]         ;671
00005c  4662              MOV      r2,r12                ;672
00005e  0052              LSLS     r2,r2,#1              ;672
000060  6302              STR      r2,[r0,#0x30]         ;672
000062  2320              MOVS     r3,#0x20              ;673
000064  e00c              B        |L26.128|
                  |L26.102|
000066  4672              MOV      r2,lr                 ;681
000068  6302              STR      r2,[r0,#0x30]         ;681
00006a  2401              MOVS     r4,#1                 ;682
00006c  e008              B        |L26.128|
                  |L26.110|
00006e  9a03              LDR      r2,[sp,#0xc]          ;686
000070  6302              STR      r2,[r0,#0x30]         ;686
000072  2402              MOVS     r4,#2                 ;687
000074  e004              B        |L26.128|
                  |L26.118|
;;;693                    }
;;;694    
;;;695                    break;
;;;696    
;;;697                case UI2C_PROTSTS_NACKIF_Msk:
;;;698                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
000076  2201              MOVS     r2,#1
000078  0292              LSLS     r2,r2,#10
00007a  624a              STR      r2,[r1,#0x24]
                  |L26.124|
;;;699                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;700                    u8Err = 1;
;;;701                    break;
;;;702    
;;;703                case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;704                default:                                                        /* Unknow status */
;;;705                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
00007c  2324              MOVS     r3,#0x24
;;;706                    u8Err = 1;
00007e  2501              MOVS     r5,#1
                  |L26.128|
;;;707                    break;
;;;708            }
;;;709    
;;;710            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000080  6dc7              LDR      r7,[r0,#0x5c]
000082  222e              MOVS     r2,#0x2e
000084  4397              BICS     r7,r7,r2
000086  431f              ORRS     r7,r7,r3
000088  65c7              STR      r7,[r0,#0x5c]
00008a  2e00              CMP      r6,#0                 ;664
00008c  d001              BEQ      |L26.146|
00008e  2d00              CMP      r5,#0                 ;664
000090  d0c4              BEQ      |L26.28|
                  |L26.146|
000092  4628              MOV      r0,r5                 ;664
;;;711        }
;;;712    
;;;713        return (u8Err | u8Xfering);                                             /* return (Success)/(Fail) status */
000094  4330              ORRS     r0,r0,r6
;;;714    }
000096  b004              ADD      sp,sp,#0x10
000098  bdf0              POP      {r4-r7,pc}
;;;715    
                          ENDP

00009a  0000              DCW      0x0000
                  |L26.156|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteByteTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_WriteByteTwoRegs PROC
;;;805    
;;;806    uint8_t UI2C_WriteByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t u8Data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;807    {
;;;808        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2601              MOVS     r6,#1
000004  468c              MOV      r12,r1                ;807
000006  2700              MOVS     r7,#0
;;;809        uint32_t u32txLen = 0;
;;;810    
;;;811        UI2C_START(ui2c);                                                           /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  469e              MOV      lr,r3                 ;807
00000c  463d              MOV      r5,r7                 ;808
00000e  463c              MOV      r4,r7                 ;809
000010  2320              MOVS     r3,#0x20
000012  4399              BICS     r1,r1,r3
000014  2308              MOVS     r3,#8
000016  4319              ORRS     r1,r1,r3
000018  65c1              STR      r1,[r0,#0x5c]
                  |L27.26|
;;;812    
;;;813        while (u8Xfering && (u8Err == 0))
;;;814        {
;;;815            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L27.26|
;;;816    
;;;817            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000022  6e41              LDR      r1,[r0,#0x64]
000024  233f              MOVS     r3,#0x3f
000026  021b              LSLS     r3,r3,#8
000028  4019              ANDS     r1,r1,r3
00002a  39ff              SUBS     r1,r1,#0xff
00002c  1e49              SUBS     r1,r1,#1
00002e  d014              BEQ      |L27.90|
000030  2303              MOVS     r3,#3
000032  021b              LSLS     r3,r3,#8
000034  1ac9              SUBS     r1,r1,r3
000036  d025              BEQ      |L27.132|
000038  2307              MOVS     r3,#7
00003a  029b              LSLS     r3,r3,#10
00003c  4299              CMP      r1,r3
00003e  d125              BNE      |L27.140|
;;;818            {
;;;819                case UI2C_PROTSTS_STARIF_Msk:
;;;820                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);         /* Clear START INT Flag */
;;;821                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);                 /* Write SLA+W to Register UI2C_TXDAT */
;;;822                    u8Ctrl = UI2C_CTL_PTRG;                                         /* Clear SI */
;;;823                    break;
;;;824    
;;;825                case UI2C_PROTSTS_ACKIF_Msk:
;;;826                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);          /* Clear ACK INT Flag */
000040  2301              MOVS     r3,#1
000042  4919              LDR      r1,|L27.168|
000044  035b              LSLS     r3,r3,#13
000046  624b              STR      r3,[r1,#0x24]
;;;827    
;;;828                    if (u32txLen == 0)
000048  2c00              CMP      r4,#0
00004a  d00f              BEQ      |L27.108|
;;;829                    {
;;;830                        UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte data address to UI2C_TXDAT */
;;;831                        u32txLen++;
;;;832                    }
;;;833                    else if (u32txLen == 1)
00004c  2c01              CMP      r4,#1
00004e  d011              BEQ      |L27.116|
;;;834                    {
;;;835                        UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));         /* Write Lo byte data address to UI2C_TXDAT */
;;;836                        u32txLen++;
;;;837                    }
;;;838                    else if (u32txLen == 2)
000050  2c02              CMP      r4,#2
000052  d013              BEQ      |L27.124|
;;;839                    {
;;;840                        UI2C_SET_DATA(ui2c, u8Data);                                  /* Write data to UI2C_TXDAT */
;;;841                        u32txLen++;
;;;842                    }
;;;843                    else
;;;844                    {
;;;845                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000054  2524              MOVS     r5,#0x24
;;;846                        u8Xfering = 0;
000056  2600              MOVS     r6,#0
000058  e01a              B        |L27.144|
                  |L27.90|
00005a  25ff              MOVS     r5,#0xff              ;820
00005c  4912              LDR      r1,|L27.168|
00005e  3501              ADDS     r5,#1                 ;820
000060  624d              STR      r5,[r1,#0x24]         ;820
000062  4661              MOV      r1,r12                ;821
000064  0049              LSLS     r1,r1,#1              ;821
000066  6301              STR      r1,[r0,#0x30]         ;821
000068  2520              MOVS     r5,#0x20              ;822
00006a  e011              B        |L27.144|
                  |L27.108|
00006c  0a11              LSRS     r1,r2,#8              ;830
00006e  6301              STR      r1,[r0,#0x30]         ;830
000070  2401              MOVS     r4,#1                 ;831
000072  e00d              B        |L27.144|
                  |L27.116|
000074  b2d1              UXTB     r1,r2                 ;835
000076  6301              STR      r1,[r0,#0x30]         ;835
000078  2402              MOVS     r4,#2                 ;836
00007a  e009              B        |L27.144|
                  |L27.124|
00007c  4671              MOV      r1,lr                 ;840
00007e  6301              STR      r1,[r0,#0x30]         ;840
000080  2403              MOVS     r4,#3                 ;841
000082  e005              B        |L27.144|
                  |L27.132|
;;;847                    }
;;;848    
;;;849                    break;
;;;850    
;;;851                case UI2C_PROTSTS_NACKIF_Msk:
;;;852                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);         /* Clear NACK INT Flag */
000084  2301              MOVS     r3,#1
000086  4908              LDR      r1,|L27.168|
000088  029b              LSLS     r3,r3,#10
00008a  624b              STR      r3,[r1,#0x24]
                  |L27.140|
;;;853                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;854                    u8Err = 1;
;;;855                    break;
;;;856    
;;;857                case UI2C_PROTSTS_ARBLOIF_Msk:                                      /* Arbitration Lost */
;;;858                default:                                                            /* Unknow status */
;;;859                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
00008c  2524              MOVS     r5,#0x24
;;;860                    u8Err = 1;
00008e  2701              MOVS     r7,#1
                  |L27.144|
;;;861                    break;
;;;862            }
;;;863    
;;;864            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                     /* Write controlbit to UI2C_CTL register */
000090  6dc1              LDR      r1,[r0,#0x5c]
000092  232e              MOVS     r3,#0x2e
000094  4399              BICS     r1,r1,r3
000096  4329              ORRS     r1,r1,r5
000098  65c1              STR      r1,[r0,#0x5c]
00009a  2e00              CMP      r6,#0                 ;813
00009c  d001              BEQ      |L27.162|
00009e  2f00              CMP      r7,#0                 ;813
0000a0  d0bb              BEQ      |L27.26|
                  |L27.162|
0000a2  4638              MOV      r0,r7                 ;813
;;;865        }
;;;866    
;;;867        return (u8Err | u8Xfering);
0000a4  4330              ORRS     r0,r0,r6
;;;868    }
0000a6  bdf0              POP      {r4-r7,pc}
;;;869    
                          ENDP

                  |L27.168|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteMultiBytes||, CODE, READONLY, ALIGN=2

                  UI2C_WriteMultiBytes PROC
;;;590    
;;;591    uint32_t UI2C_WriteMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t *pu8Data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;592    {
;;;593        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2701              MOVS     r7,#1
000004  468c              MOV      r12,r1                ;592
000006  2500              MOVS     r5,#0
;;;594        uint32_t u32txLen = 0;
;;;595    
;;;596        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;592
00000c  462b              MOV      r3,r5                 ;593
00000e  462c              MOV      r4,r5                 ;594
000010  2620              MOVS     r6,#0x20
000012  43b1              BICS     r1,r1,r6
000014  2608              MOVS     r6,#8
000016  4331              ORRS     r1,r1,r6
000018  65c1              STR      r1,[r0,#0x5c]
;;;597    
;;;598        while (u8Xfering && (u8Err == 0))
;;;599        {
;;;600            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;601    
;;;602            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;603            {
;;;604                case UI2C_PROTSTS_STARIF_Msk:
;;;605                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  491d              LDR      r1,|L28.144|
                  |L28.28|
00001c  6e46              LDR      r6,[r0,#0x64]         ;600
00001e  04b6              LSLS     r6,r6,#18             ;600
000020  0eb6              LSRS     r6,r6,#26             ;600
000022  d0fb              BEQ      |L28.28|
000024  6e46              LDR      r6,[r0,#0x64]         ;602
000026  223f              MOVS     r2,#0x3f              ;602
000028  0212              LSLS     r2,r2,#8              ;602
00002a  4016              ANDS     r6,r6,r2              ;602
00002c  3eff              SUBS     r6,r6,#0xff           ;602
00002e  1e76              SUBS     r6,r6,#1              ;602
000030  d012              BEQ      |L28.88|
000032  2203              MOVS     r2,#3                 ;602
000034  0212              LSLS     r2,r2,#8              ;602
000036  1ab6              SUBS     r6,r6,r2              ;602
000038  d019              BEQ      |L28.110|
00003a  2207              MOVS     r2,#7                 ;602
00003c  0292              LSLS     r2,r2,#10             ;602
00003e  4296              CMP      r6,r2                 ;602
000040  d118              BNE      |L28.116|
;;;606                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;607                    u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;608                    break;
;;;609    
;;;610                case UI2C_PROTSTS_ACKIF_Msk:
;;;611                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2601              MOVS     r6,#1
000044  0376              LSLS     r6,r6,#13
000046  624e              STR      r6,[r1,#0x24]
;;;612    
;;;613                    if (u32txLen < u32wLen)
000048  9e03              LDR      r6,[sp,#0xc]
00004a  42b4              CMP      r4,r6
00004c  d20c              BCS      |L28.104|
;;;614                        UI2C_SET_DATA(ui2c, pu8Data[u32txLen++]);                  /* Write data to UI2C_TXDAT */
00004e  4672              MOV      r2,lr
000050  5d16              LDRB     r6,[r2,r4]
000052  6306              STR      r6,[r0,#0x30]
000054  1c64              ADDS     r4,r4,#1
000056  e00f              B        |L28.120|
                  |L28.88|
000058  22ff              MOVS     r2,#0xff              ;605
00005a  3201              ADDS     r2,#1                 ;605
00005c  624a              STR      r2,[r1,#0x24]         ;605
00005e  4662              MOV      r2,r12                ;606
000060  0052              LSLS     r2,r2,#1              ;606
000062  6302              STR      r2,[r0,#0x30]         ;606
000064  2320              MOVS     r3,#0x20              ;607
000066  e007              B        |L28.120|
                  |L28.104|
;;;615                    else
;;;616                    {
;;;617                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000068  2324              MOVS     r3,#0x24
;;;618                        u8Xfering = 0;
00006a  2700              MOVS     r7,#0
00006c  e004              B        |L28.120|
                  |L28.110|
;;;619                    }
;;;620    
;;;621                    break;
;;;622    
;;;623                case UI2C_PROTSTS_NACKIF_Msk:
;;;624                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00006e  2201              MOVS     r2,#1
000070  0292              LSLS     r2,r2,#10
000072  624a              STR      r2,[r1,#0x24]
                  |L28.116|
;;;625                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;626                    u8Err = 1;
;;;627                    break;
;;;628    
;;;629                case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;630                default:                                                        /* Unknow status */
;;;631                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000074  2324              MOVS     r3,#0x24
;;;632                    u8Err = 1;
000076  2501              MOVS     r5,#1
                  |L28.120|
;;;633                    break;
;;;634            }
;;;635    
;;;636            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000078  6dc6              LDR      r6,[r0,#0x5c]
00007a  222e              MOVS     r2,#0x2e
00007c  4396              BICS     r6,r6,r2
00007e  431e              ORRS     r6,r6,r3
000080  65c6              STR      r6,[r0,#0x5c]
000082  2f00              CMP      r7,#0                 ;598
000084  d001              BEQ      |L28.138|
000086  2d00              CMP      r5,#0                 ;598
000088  d0c8              BEQ      |L28.28|
                  |L28.138|
;;;637        }
;;;638    
;;;639        return u32txLen;                                                        /* Return bytes length that have been transmitted */
00008a  4620              MOV      r0,r4
;;;640    }
00008c  b004              ADD      sp,sp,#0x10
00008e  bdf0              POP      {r4-r7,pc}
;;;641    
                          ENDP

                  |L28.144|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteMultiBytesOneReg||, CODE, READONLY, ALIGN=2

                  UI2C_WriteMultiBytesOneReg PROC
;;;731    
;;;732    uint32_t UI2C_WriteMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t *pu8Data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;733    {
;;;734        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2701              MOVS     r7,#1
000004  468c              MOV      r12,r1                ;733
000006  2500              MOVS     r5,#0
;;;735        uint32_t u32txLen = 0;
;;;736    
;;;737        UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;733
00000c  462c              MOV      r4,r5                 ;734
00000e  462b              MOV      r3,r5                 ;735
000010  2620              MOVS     r6,#0x20
000012  43b1              BICS     r1,r1,r6
000014  2608              MOVS     r6,#8
000016  4331              ORRS     r1,r1,r6
000018  65c1              STR      r1,[r0,#0x5c]
;;;738    
;;;739        while (u8Xfering && (u8Err == 0))
;;;740        {
;;;741            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
;;;742    
;;;743            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
;;;744            {
;;;745                case UI2C_PROTSTS_STARIF_Msk:
;;;746                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
00001a  4921              LDR      r1,|L29.160|
                  |L29.28|
00001c  6e46              LDR      r6,[r0,#0x64]         ;741
00001e  04b6              LSLS     r6,r6,#18             ;741
000020  0eb6              LSRS     r6,r6,#26             ;741
000022  d0fb              BEQ      |L29.28|
000024  6e46              LDR      r6,[r0,#0x64]         ;743
000026  223f              MOVS     r2,#0x3f              ;743
000028  0212              LSLS     r2,r2,#8              ;743
00002a  4016              ANDS     r6,r6,r2              ;743
00002c  3eff              SUBS     r6,r6,#0xff           ;743
00002e  1e76              SUBS     r6,r6,#1              ;743
000030  d015              BEQ      |L29.94|
000032  2203              MOVS     r2,#3                 ;743
000034  0212              LSLS     r2,r2,#8              ;743
000036  1ab6              SUBS     r6,r6,r2              ;743
000038  d020              BEQ      |L29.124|
00003a  2207              MOVS     r2,#7                 ;743
00003c  0292              LSLS     r2,r2,#10             ;743
00003e  4296              CMP      r6,r2                 ;743
000040  d11f              BNE      |L29.130|
;;;747                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);             /* Write SLA+W to Register UI2C_TXDAT */
;;;748                    u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;749                    break;
;;;750    
;;;751                case UI2C_PROTSTS_ACKIF_Msk:
;;;752                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2601              MOVS     r6,#1
000044  0376              LSLS     r6,r6,#13
000046  624e              STR      r6,[r1,#0x24]
;;;753    
;;;754                    if (u32txLen == 0)
000048  2b00              CMP      r3,#0
00004a  d010              BEQ      |L29.110|
;;;755                    {
;;;756                        UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address to UI2C_TXDAT */
;;;757                        u32txLen++;
;;;758                    }
;;;759                    else
;;;760                    {
;;;761                        if (u32txLen < u32wLen + 1)                             /* TX length = u32wLen + 1(u8DataAddr)*/
00004c  9e09              LDR      r6,[sp,#0x24]
00004e  1c76              ADDS     r6,r6,#1
000050  42b3              CMP      r3,r6
000052  d210              BCS      |L29.118|
;;;762                            UI2C_SET_DATA(ui2c, pu8Data[u32txLen++]);              /* Write data to UI2C_TXDAT */
000054  9e03              LDR      r6,[sp,#0xc]
000056  5cf6              LDRB     r6,[r6,r3]
000058  6306              STR      r6,[r0,#0x30]
00005a  1c5b              ADDS     r3,r3,#1
00005c  e013              B        |L29.134|
                  |L29.94|
00005e  22ff              MOVS     r2,#0xff              ;746
000060  3201              ADDS     r2,#1                 ;746
000062  624a              STR      r2,[r1,#0x24]         ;746
000064  4662              MOV      r2,r12                ;747
000066  0052              LSLS     r2,r2,#1              ;747
000068  6302              STR      r2,[r0,#0x30]         ;747
00006a  2420              MOVS     r4,#0x20              ;748
00006c  e00b              B        |L29.134|
                  |L29.110|
00006e  4672              MOV      r2,lr                 ;756
000070  6302              STR      r2,[r0,#0x30]         ;756
000072  2301              MOVS     r3,#1                 ;757
000074  e007              B        |L29.134|
                  |L29.118|
;;;763                        else
;;;764                        {
;;;765                            u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);            /* Clear SI and send STOP */
000076  2424              MOVS     r4,#0x24
;;;766                            u8Xfering = 0;
000078  2700              MOVS     r7,#0
00007a  e004              B        |L29.134|
                  |L29.124|
;;;767                        }
;;;768                    }
;;;769    
;;;770                    break;
;;;771    
;;;772                case UI2C_PROTSTS_NACKIF_Msk:
;;;773                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00007c  2201              MOVS     r2,#1
00007e  0292              LSLS     r2,r2,#10
000080  624a              STR      r2,[r1,#0x24]
                  |L29.130|
;;;774                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;775                    u8Err = 1;
;;;776                    break;
;;;777    
;;;778                case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;779                default:                                                        /* Unknow status */
;;;780                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000082  2424              MOVS     r4,#0x24
;;;781                    u8Err = 1;
000084  2501              MOVS     r5,#1
                  |L29.134|
;;;782                    break;
;;;783            }
;;;784    
;;;785            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000086  6dc6              LDR      r6,[r0,#0x5c]
000088  222e              MOVS     r2,#0x2e
00008a  4396              BICS     r6,r6,r2
00008c  4326              ORRS     r6,r6,r4
00008e  65c6              STR      r6,[r0,#0x5c]
000090  2f00              CMP      r7,#0                 ;739
000092  d001              BEQ      |L29.152|
000094  2d00              CMP      r5,#0                 ;739
000096  d0c1              BEQ      |L29.28|
                  |L29.152|
;;;786        }
;;;787    
;;;788        return u32txLen;                                                        /* Return bytes length that have been transmitted */
000098  4618              MOV      r0,r3
;;;789    }
00009a  b004              ADD      sp,sp,#0x10
00009c  bdf0              POP      {r4-r7,pc}
;;;790    
                          ENDP

00009e  0000              DCW      0x0000
                  |L29.160|
                          DCD      0x40070040

                          AREA ||i.UI2C_WriteMultiBytesTwoRegs||, CODE, READONLY, ALIGN=2

                  UI2C_WriteMultiBytesTwoRegs PROC
;;;885    
;;;886    uint32_t UI2C_WriteMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t *pu8Data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;887    {
;;;888        uint8_t u8Xfering = 1, u8Err = 0, u8Ctrl = 0;
000002  2600              MOVS     r6,#0
000004  468e              MOV      lr,r1                 ;887
000006  2101              MOVS     r1,#1
;;;889        uint32_t u32txLen = 0;
;;;890        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;891    
;;;892        UI2C_START(ui2c);                                                           /* Send START */
000008  6dc7              LDR      r7,[r0,#0x5c]
00000a  4694              MOV      r12,r2                ;887
00000c  4634              MOV      r4,r6                 ;888
00000e  4635              MOV      r5,r6                 ;889
000010  2312              MOVS     r3,#0x12              ;890
000012  2220              MOVS     r2,#0x20
000014  4397              BICS     r7,r7,r2
000016  2208              MOVS     r2,#8
000018  4317              ORRS     r7,r7,r2
00001a  65c7              STR      r7,[r0,#0x5c]
                  |L30.28|
;;;893    
;;;894        while (u8Xfering && (u8Err == 0))
;;;895        {
;;;896            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00));                     /* Wait UI2C new status occur */
00001c  6e42              LDR      r2,[r0,#0x64]
00001e  0492              LSLS     r2,r2,#18
000020  0e92              LSRS     r2,r2,#26
000022  d0fb              BEQ      |L30.28|
;;;897    
;;;898            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00)
000024  6e47              LDR      r7,[r0,#0x64]
000026  223f              MOVS     r2,#0x3f
000028  0212              LSLS     r2,r2,#8
00002a  4017              ANDS     r7,r7,r2
00002c  3fff              SUBS     r7,r7,#0xff
00002e  1e7f              SUBS     r7,r7,#1
000030  d017              BEQ      |L30.98|
000032  2203              MOVS     r2,#3
000034  0212              LSLS     r2,r2,#8
000036  1abf              SUBS     r7,r7,r2
000038  d02a              BEQ      |L30.144|
00003a  2207              MOVS     r2,#7
00003c  0292              LSLS     r2,r2,#10
00003e  4297              CMP      r7,r2
000040  d12a              BNE      |L30.152|
;;;899            {
;;;900                case UI2C_PROTSTS_STARIF_Msk:
;;;901                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_STARIF_Msk);         /* Clear START INT Flag */
;;;902                    UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1) | 0x00);                 /* Write SLA+W to Register UI2C_TXDAT */
;;;903                    eEvent = MASTER_SEND_ADDRESS;
;;;904                    u8Ctrl = UI2C_CTL_PTRG;                                         /* Clear SI */
;;;905                    break;
;;;906    
;;;907                case UI2C_PROTSTS_ACKIF_Msk:
;;;908                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_ACKIF_Msk);          /* Clear ACK INT Flag */
000042  2201              MOVS     r2,#1
000044  4f1b              LDR      r7,|L30.180|
000046  0352              LSLS     r2,r2,#13
000048  627a              STR      r2,[r7,#0x24]
;;;909    
;;;910                    if (eEvent == MASTER_SEND_ADDRESS)
00004a  2b0a              CMP      r3,#0xa
00004c  d013              BEQ      |L30.118|
;;;911                    {
;;;912                        UI2C_SET_DATA(ui2c, (uint8_t)((u16DataAddr & 0xFF00) >> 8));  /* Write Hi byte data address to UI2C_TXDAT */
;;;913                        eEvent = MASTER_SEND_H_WR_ADDRESS;
;;;914                    }
;;;915                    else if (eEvent == MASTER_SEND_H_WR_ADDRESS)
00004e  2b0b              CMP      r3,#0xb
000050  d016              BEQ      |L30.128|
;;;916                    {
;;;917                        UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF));         /* Write Lo byte data address to UI2C_TXDAT */
;;;918                        eEvent = MASTER_SEND_L_ADDRESS;
;;;919                    }
;;;920                    else
;;;921                    {
;;;922                        if (u32txLen < u32wLen)
000052  9a09              LDR      r2,[sp,#0x24]
000054  4295              CMP      r5,r2
000056  d218              BCS      |L30.138|
;;;923                            UI2C_SET_DATA(ui2c, pu8Data[u32txLen++]);                  /* Write data to UI2C_TXDAT */
000058  9a03              LDR      r2,[sp,#0xc]
00005a  5d52              LDRB     r2,[r2,r5]
00005c  6302              STR      r2,[r0,#0x30]
00005e  1c6d              ADDS     r5,r5,#1
000060  e01c              B        |L30.156|
                  |L30.98|
000062  23ff              MOVS     r3,#0xff              ;901
000064  4a13              LDR      r2,|L30.180|
000066  3301              ADDS     r3,#1                 ;901
000068  6253              STR      r3,[r2,#0x24]         ;901
00006a  4672              MOV      r2,lr                 ;902
00006c  0052              LSLS     r2,r2,#1              ;902
00006e  6302              STR      r2,[r0,#0x30]         ;902
000070  230a              MOVS     r3,#0xa               ;903
000072  2420              MOVS     r4,#0x20              ;904
000074  e012              B        |L30.156|
                  |L30.118|
000076  4662              MOV      r2,r12                ;912
000078  0a12              LSRS     r2,r2,#8              ;912
00007a  6302              STR      r2,[r0,#0x30]         ;912
00007c  230b              MOVS     r3,#0xb               ;913
00007e  e00d              B        |L30.156|
                  |L30.128|
000080  4662              MOV      r2,r12                ;917
000082  b2d2              UXTB     r2,r2                 ;917
000084  6302              STR      r2,[r0,#0x30]         ;917
000086  230d              MOVS     r3,#0xd               ;918
000088  e008              B        |L30.156|
                  |L30.138|
;;;924                        else
;;;925                        {
;;;926                            u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
00008a  2424              MOVS     r4,#0x24
;;;927                            u8Xfering = 0;
00008c  2100              MOVS     r1,#0
00008e  e005              B        |L30.156|
                  |L30.144|
;;;928                        }
;;;929                    }
;;;930    
;;;931                    break;
;;;932    
;;;933                case UI2C_PROTSTS_NACKIF_Msk:
;;;934                    UI2C_CLR_PROT_INT_FLAG(UI2C0, UI2C_PROTSTS_NACKIF_Msk);         /* Clear NACK INT Flag */
000090  2401              MOVS     r4,#1
000092  4a08              LDR      r2,|L30.180|
000094  02a4              LSLS     r4,r4,#10
000096  6254              STR      r4,[r2,#0x24]
                  |L30.152|
;;;935                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;936                    u8Err = 1;
;;;937                    break;
;;;938    
;;;939                case UI2C_PROTSTS_ARBLOIF_Msk:                                      /* Arbitration Lost */
;;;940                default:                                                            /* Unknow status */
;;;941                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
000098  2424              MOVS     r4,#0x24
;;;942                    u8Err = 1;
00009a  2601              MOVS     r6,#1
                  |L30.156|
;;;943                    break;
;;;944            }
;;;945    
;;;946            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                     /* Write controlbit to UI2C_CTL register */
00009c  6dc7              LDR      r7,[r0,#0x5c]
00009e  222e              MOVS     r2,#0x2e
0000a0  4397              BICS     r7,r7,r2
0000a2  4327              ORRS     r7,r7,r4
0000a4  65c7              STR      r7,[r0,#0x5c]
0000a6  2900              CMP      r1,#0                 ;894
0000a8  d001              BEQ      |L30.174|
0000aa  2e00              CMP      r6,#0                 ;894
0000ac  d0b6              BEQ      |L30.28|
                  |L30.174|
;;;947        }
;;;948    
;;;949        return u32txLen;                                                            /* Return bytes length that have been transmitted */
0000ae  4628              MOV      r0,r5
;;;950    }
0000b0  b004              ADD      sp,sp,#0x10
0000b2  bdf0              POP      {r4-r7,pc}
;;;951    
                          ENDP

                  |L30.180|
                          DCD      0x40070040

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\usci_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usci_i2c_c_c16bae74____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_usci_i2c_c_c16bae74____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usci_i2c_c_c16bae74____REVSH|
#line 479
|__asm___10_usci_i2c_c_c16bae74____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
