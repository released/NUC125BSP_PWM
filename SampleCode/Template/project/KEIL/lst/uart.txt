; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\uart.crf ..\..\..\..\Library\StdDriver\src\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;345      */
;;;346    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;347    {
;;;348        uint32_t u32PllFreq = 0, u32PllReg;
;;;349        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;350        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000002  a012              ADR      r0,|L1.76|
000004  6800              LDR      r0,[r0,#0]
;;;351    
;;;352        u32PllReg = CLK->PLLCTL;
000006  9000              STR      r0,[sp,#0]
000008  4811              LDR      r0,|L1.80|
00000a  6a01              LDR      r1,[r0,#0x20]
;;;353    
;;;354        if (u32PllReg & (CLK_PLLCTL_PD_Msk | CLK_PLLCTL_OE_Msk))
00000c  1300              ASRS     r0,r0,#12
00000e  4201              TST      r1,r0
000010  d001              BEQ      |L1.22|
;;;355            return 0;           /* PLL is in power down mode or fix low */
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;356    
;;;357        if (u32PllReg & CLK_PLLCTL_PLLSRC_HIRC_DIV2)
;;;358            u32FIN = __HIRC_DIV2;    /* PLL source clock from HIRC_DIV2 */
;;;359        else
;;;360            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;361    
;;;362        if (u32PllReg & CLK_PLLCTL_BP_Msk)
;;;363            return u32FIN;      /* PLL is in bypass mode */
;;;364    
;;;365        /* PLL is output enabled in normal work mode */
;;;366        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCTL_OUTDIV_Msk) >> CLK_PLLCTL_OUTDIV_Pos)];
;;;367        u32NF = ((u32PllReg & CLK_PLLCTL_FBDIV_Msk) >> CLK_PLLCTL_FBDIV_Pos) + 2;
;;;368        u32NR = ((u32PllReg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos) + 2;
;;;369    
;;;370        /* u32FIN is shifted 2 bits to avoid overflow */
;;;371        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;372    
;;;373        return u32PllFreq;
;;;374    }
000014  bd08              POP      {r3,pc}
                  |L1.22|
000016  2011              MOVS     r0,#0x11              ;357
000018  04c0              LSLS     r0,r0,#19             ;357
00001a  4201              TST      r1,r0                 ;357
00001c  d001              BEQ      |L1.34|
00001e  480d              LDR      r0,|L1.84|
000020  e000              B        |L1.36|
                  |L1.34|
000022  480d              LDR      r0,|L1.88|
                  |L1.36|
000024  038a              LSLS     r2,r1,#14             ;362
000026  d4f5              BMI      |L1.20|
000028  040a              LSLS     r2,r1,#16             ;366
00002a  0f92              LSRS     r2,r2,#30             ;366
00002c  466b              MOV      r3,sp                 ;366
00002e  5c9b              LDRB     r3,[r3,r2]            ;366
000030  05ca              LSLS     r2,r1,#23             ;367
000032  0489              LSLS     r1,r1,#18             ;368
000034  0dd2              LSRS     r2,r2,#23             ;367
000036  0ec9              LSRS     r1,r1,#27             ;368
000038  1c89              ADDS     r1,r1,#2              ;368
00003a  0880              LSRS     r0,r0,#2              ;371
00003c  1c92              ADDS     r2,r2,#2              ;371
00003e  4359              MULS     r1,r3,r1              ;371
000040  4350              MULS     r0,r2,r0              ;371
000042  f7fffffe          BL       __aeabi_uidivmod
000046  0080              LSLS     r0,r0,#2              ;371
000048  bd08              POP      {r3,pc}
;;;375    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
00004c  01020204          DCB      1,2,2,4
                  |L1.80|
                          DCD      0x50000200
                  |L1.84|
                          DCD      0x016e3600
                  |L1.88|
                          DCD      0x00b71b00

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;40      */
;;;41     void UART_ClearIntFlag(UART_T *psUART, uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;42     {
000002  d501              BPL      |L2.8|
;;;43     
;;;44         if (u32InterruptFlag & UART_INTSTS_RLSINT_Msk)      /* Clear Receive Line Status Interrupt */
;;;45             psUART->FIFOSTS = UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_ADDRDETF_Msk;
000004  2268              MOVS     r2,#0x68
000006  6182              STR      r2,[r0,#0x18]
                  |L2.8|
;;;46     
;;;47         if (u32InterruptFlag & UART_INTSTS_MODEMINT_Msk)    /* Clear Modem Status Interrupt */
000008  050a              LSLS     r2,r1,#20
00000a  d503              BPL      |L2.20|
;;;48             psUART->MODEMSTS |= UART_MODEMSTS_CTSDETF_Msk;
00000c  6942              LDR      r2,[r0,#0x14]
00000e  2301              MOVS     r3,#1
000010  431a              ORRS     r2,r2,r3
000012  6142              STR      r2,[r0,#0x14]
                  |L2.20|
;;;49     
;;;50         if (u32InterruptFlag & UART_INTSTS_BUFERRINT_Msk)   /* Clear Buffer Error Interrupt */
000014  048a              LSLS     r2,r1,#18
000016  d501              BPL      |L2.28|
;;;51             psUART->FIFOSTS = UART_FIFOSTS_RXOVIF_Msk | UART_FIFOSTS_TXOVIF_Msk;
000018  4a06              LDR      r2,|L2.52|
00001a  6182              STR      r2,[r0,#0x18]
                  |L2.28|
;;;52     
;;;53         if (u32InterruptFlag & UART_INTSTS_WKINT_Msk)       /* Clear Wake-up Interrupt */
00001c  044a              LSLS     r2,r1,#17
00001e  d501              BPL      |L2.36|
;;;54             psUART->WKSTS = psUART->WKSTS;
000020  6c42              LDR      r2,[r0,#0x44]
000022  6442              STR      r2,[r0,#0x44]
                  |L2.36|
;;;55     
;;;56         if (u32InterruptFlag & UART_INTSTS_LININT_Msk)      /* Clear LIN Bus Interrupt */
000024  0409              LSLS     r1,r1,#16
000026  d503              BPL      |L2.48|
;;;57         {
;;;58             psUART->INTSTS = UART_INTSTS_LINIF_Msk;
000028  2180              MOVS     r1,#0x80
00002a  61c1              STR      r1,[r0,#0x1c]
;;;59             psUART->LINSTS = psUART->LINSTS;
00002c  6b81              LDR      r1,[r0,#0x38]
00002e  6381              STR      r1,[r0,#0x38]
                  |L2.48|
;;;60         }
;;;61     
;;;62     }
000030  4770              BX       lr
;;;63     
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      0x01000001

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;73      */
;;;74     void UART_Close(UART_T *psUART)
000000  2100              MOVS     r1,#0
;;;75     {
;;;76         psUART->INTEN = 0;
000002  6041              STR      r1,[r0,#4]
;;;77     }
000004  4770              BX       lr
;;;78     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;88      */
;;;89     void UART_DisableFlowCtrl(UART_T *psUART)
000000  6841              LDR      r1,[r0,#4]
;;;90     {
;;;91         psUART->INTEN &= ~(UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;92     }
00000a  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=2

                  UART_DisableInt PROC
;;;114     */
;;;115    void UART_DisableInt(UART_T  *psUART, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;116    {
;;;117        /* Disable UART specified interrupt */
;;;118        UART_DISABLE_INT(psUART, u32InterruptFlag);
000002  438a              BICS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
000006  2001              MOVS     r0,#1
000008  4903              LDR      r1,|L5.24|
00000a  0300              LSLS     r0,r0,#12
00000c  6008              STR      r0,[r1,#0]
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
;;;119    
;;;120        /* Disable NVIC UART IRQ */
;;;121        NVIC_DisableIRQ(UART0_IRQn);
;;;122    
;;;123    }
000016  4770              BX       lr
;;;124    
                          ENDP

                  |L5.24|
                          DCD      0xe000e180

                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;133     */
;;;134    void UART_EnableFlowCtrl(UART_T *psUART)
000000  6901              LDR      r1,[r0,#0x10]
;;;135    {
;;;136        /* Set RTS pin output is low level active */
;;;137        psUART->MODEM |= UART_MODEM_RTSACTLV_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;138    
;;;139        /* Set CTS pin input is low level active */
;;;140        psUART->MODEMSTS |= UART_MODEMSTS_CTSACTLV_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;141    
;;;142        /* Set RTS and CTS auto flow control enable */
;;;143        psUART->INTEN |= UART_INTEN_ATORTSEN_Msk | UART_INTEN_ATOCTSEN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;144    }
00001c  4770              BX       lr
;;;145    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=2

                  UART_EnableInt PROC
;;;166     */
;;;167    void UART_EnableInt(UART_T  *psUART, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;168    {
;;;169    
;;;170        /* Enable UART specified interrupt */
;;;171        UART_ENABLE_INT(psUART, u32InterruptFlag);
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
000006  2001              MOVS     r0,#1
000008  4901              LDR      r1,|L7.16|
00000a  0300              LSLS     r0,r0,#12
00000c  6008              STR      r0,[r1,#0]
;;;172    
;;;173        /* Enable NVIC UART IRQ */
;;;174        NVIC_EnableIRQ(UART0_IRQn);
;;;175    
;;;176    }
00000e  4770              BX       lr
;;;177    
                          ENDP

                  |L7.16|
                          DCD      0xe000e100

                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;188     */
;;;189    void UART_Open(UART_T *psUART, uint32_t u32Baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;190    {
000002  4604              MOV      r4,r0
;;;191        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;192        uint32_t au32ClkTbl[4] = {__HXT, 0, __LXT, __HIRC_DIV2};
000004  481c              LDR      r0,|L8.120|
000006  460d              MOV      r5,r1                 ;190
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;190
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;193        uint32_t u32BaudDiv = 0;
;;;194    
;;;195        /* Get UART clock source selection */
;;;196        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UARTSEL_Msk) >> CLK_CLKSEL1_UARTSEL_Pos;
000010  481a              LDR      r0,|L8.124|
000012  6941              LDR      r1,[r0,#0x14]
;;;197    
;;;198        /* Get UART clock divider number */
;;;199        u8UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UARTDIV_Msk) >> CLK_CLKDIV0_UARTDIV_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;200    
;;;201        /* Select UART function */
;;;202        psUART->FUNCSEL = UART_FUNCSEL_UART;
;;;203    
;;;204        /* Set UART line configuration */
;;;205        psUART->LINE = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;206    
;;;207        /* Set UART Rx and RTS trigger level */
;;;208        psUART->FIFO &= ~(UART_FIFO_RFITL_Msk | UART_FIFO_RTSTRGLV_Msk);
;;;209    
;;;210        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;211        if (u8UartClkSrcSel == 1)
;;;212            au32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;213    
;;;214        /* Set UART baud rate */
;;;215        if (u32Baudrate != 0)
;;;216        {
;;;217            u32BaudDiv = UART_BAUD_MODE2_DIVIDER((au32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Baudrate);
;;;218    
;;;219            if (u32BaudDiv > 0xFFFF)
;;;220                psUART->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((au32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Baudrate));
;;;221            else
;;;222                psUART->BAUD = (UART_BAUD_MODE2 | u32BaudDiv);
;;;223        }
;;;224    }
000016  018a              LSLS     r2,r1,#6
000018  2103              MOVS     r1,#3
00001a  0f96              LSRS     r6,r2,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2000              MOVS     r0,#0                 ;202
000022  6320              STR      r0,[r4,#0x30]         ;202
000024  60e1              STR      r1,[r4,#0xc]          ;205
000026  68a0              LDR      r0,[r4,#8]            ;208
000028  4915              LDR      r1,|L8.128|
00002a  4008              ANDS     r0,r0,r1              ;208
00002c  60a0              STR      r0,[r4,#8]            ;208
00002e  2e01              CMP      r6,#1                 ;211
000030  d102              BNE      |L8.56|
000032  f7fffffe          BL       CLK_GetPLLClockFreq
000036  9001              STR      r0,[sp,#4]            ;212
                  |L8.56|
000038  2d00              CMP      r5,#0                 ;215
00003a  d01b              BEQ      |L8.116|
00003c  00b1              LSLS     r1,r6,#2              ;217
00003e  4668              MOV      r0,sp                 ;217
000040  5840              LDR      r0,[r0,r1]            ;217
000042  1c79              ADDS     r1,r7,#1              ;217
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4606              MOV      r6,r0                 ;217
00004a  0869              LSRS     r1,r5,#1              ;217
00004c  1840              ADDS     r0,r0,r1              ;217
00004e  4629              MOV      r1,r5                 ;217
000050  f7fffffe          BL       __aeabi_uidivmod
000054  490b              LDR      r1,|L8.132|
000056  1e80              SUBS     r0,r0,#2              ;219
000058  4288              CMP      r0,r1                 ;219
00005a  d907              BLS      |L8.108|
00005c  00e9              LSLS     r1,r5,#3              ;220
00005e  1870              ADDS     r0,r6,r1              ;220
000060  4629              MOV      r1,r5                 ;220
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0900              LSRS     r0,r0,#4              ;220
000068  1e80              SUBS     r0,r0,#2              ;220
00006a  e002              B        |L8.114|
                  |L8.108|
00006c  2103              MOVS     r1,#3                 ;222
00006e  0709              LSLS     r1,r1,#28             ;222
000070  4308              ORRS     r0,r0,r1              ;222
                  |L8.114|
000072  6260              STR      r0,[r4,#0x24]         ;222
                  |L8.116|
000074  b005              ADD      sp,sp,#0x14
000076  bdf0              POP      {r4-r7,pc}
;;;225    
                          ENDP

                  |L8.120|
                          DCD      ||.constdata||
                  |L8.124|
                          DCD      0x50000200
                  |L8.128|
                          DCD      0xfff0ff0f
                  |L8.132|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;237     */
;;;238    uint32_t UART_Read(UART_T *psUART, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;239    {
000002  4604              MOV      r4,r0
;;;240        uint32_t  u32Count, u32Delayno;
;;;241    
;;;242        for (u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;243        {
;;;244            u32Delayno = 0;
;;;245    
;;;246            while (psUART->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk)   /* Check RX empty => failed */
;;;247            {
;;;248                u32Delayno++;
;;;249    
;;;250                if (u32Delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L9.38|
                  |L9.12|
00000c  2300              MOVS     r3,#0                 ;244
00000e  e004              B        |L9.26|
                  |L9.16|
000010  1c5b              ADDS     r3,r3,#1              ;246
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L9.26|
;;;251                    return FALSE;
000016  2000              MOVS     r0,#0
;;;252            }
;;;253    
;;;254            pu8RxBuf[u32Count] = psUART->DAT;    /* Get Data from UART RX  */
;;;255        }
;;;256    
;;;257        return u32Count;
;;;258    
;;;259    }
000018  bd70              POP      {r4-r6,pc}
                  |L9.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;246
00001c  0476              LSLS     r6,r6,#17             ;246
00001e  d4f7              BMI      |L9.16|
000020  6823              LDR      r3,[r4,#0]            ;254
000022  540b              STRB     r3,[r1,r0]            ;254
000024  1c40              ADDS     r0,r0,#1              ;254
                  |L9.38|
000026  4290              CMP      r0,r2                 ;242
000028  d3f0              BCC      |L9.12|
00002a  bd70              POP      {r4-r6,pc}
;;;260    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;352     */
;;;353    void UART_SelectIrDAMode(UART_T *psUART, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;354    {
000002  4604              MOV      r4,r0
;;;355        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;356        uint32_t au32ClkTbl[4] = {__HXT, 0, __LXT, __HIRC_DIV2};
000004  481c              LDR      r0,|L10.120|
000006  b084              SUB      sp,sp,#0x10           ;354
000008  c80f              LDM      r0,{r0-r3}
;;;357        uint32_t u32Baud_Div;
;;;358    
;;;359        /* Select IrDA function mode */
;;;360        psUART->FUNCSEL = UART_FUNCSEL_IrDA;
00000a  466d              MOV      r5,sp
00000c  c50f              STM      r5!,{r0-r3}
00000e  2602              MOVS     r6,#2
000010  6326              STR      r6,[r4,#0x30]
;;;361    
;;;362        /* Get UART clock source selection */
;;;363        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UARTSEL_Msk) >> CLK_CLKSEL1_UARTSEL_Pos;
000012  481a              LDR      r0,|L10.124|
000014  6941              LDR      r1,[r0,#0x14]
;;;364    
;;;365        /* Get UART clock divider number */
;;;366        u8UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UARTDIV_Msk) >> CLK_CLKDIV0_UARTDIV_Pos;
000016  6980              LDR      r0,[r0,#0x18]
;;;367    
;;;368        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;369        if (u8UartClkSrcSel == 1)
;;;370            au32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;371    
;;;372        /* Set UART IrDA baud rate in mode 0 */
;;;373        if (u32Buadrate != 0)
;;;374        {
;;;375            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((au32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Buadrate);
;;;376    
;;;377            if (u32Baud_Div < 0xFFFF)
;;;378                psUART->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;379        }
;;;380    
;;;381        /* Configure IrDA relative settings */
;;;382        if (u32Direction == UART_IRDA_RXEN)
;;;383        {
;;;384            psUART->IRDA |= UART_IRDA_RXINV_Msk;     //Rx signal is inverse
;;;385            psUART->IRDA &= ~UART_IRDA_TXEN_Msk;
;;;386        }
;;;387        else
;;;388        {
;;;389            psUART->IRDA &= ~UART_IRDA_TXINV_Msk;    //Tx signal is not inverse
;;;390            psUART->IRDA |= UART_IRDA_TXEN_Msk;
;;;391        }
;;;392    
;;;393    }
000018  0189              LSLS     r1,r1,#6
00001a  0f8d              LSRS     r5,r1,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2d01              CMP      r5,#1                 ;369
000022  d102              BNE      |L10.42|
000024  f7fffffe          BL       CLK_GetPLLClockFreq
000028  9001              STR      r0,[sp,#4]            ;370
                  |L10.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;373
00002c  2800              CMP      r0,#0                 ;373
00002e  d011              BEQ      |L10.84|
000030  00a9              LSLS     r1,r5,#2              ;375
000032  4668              MOV      r0,sp                 ;375
000034  5840              LDR      r0,[r0,r1]            ;375
000036  1c79              ADDS     r1,r7,#1              ;375
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  9905              LDR      r1,[sp,#0x14]         ;375
00003e  00c9              LSLS     r1,r1,#3              ;375
000040  1840              ADDS     r0,r0,r1              ;375
000042  9905              LDR      r1,[sp,#0x14]         ;375
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0900              LSRS     r0,r0,#4              ;375
00004a  490d              LDR      r1,|L10.128|
00004c  1e80              SUBS     r0,r0,#2              ;377
00004e  4288              CMP      r0,r1                 ;377
000050  d200              BCS      |L10.84|
000052  6260              STR      r0,[r4,#0x24]         ;378
                  |L10.84|
000054  9806              LDR      r0,[sp,#0x18]         ;382
000056  2800              CMP      r0,#0                 ;382
000058  6aa0              LDR      r0,[r4,#0x28]         ;389
00005a  d007              BEQ      |L10.108|
00005c  2120              MOVS     r1,#0x20              ;389
00005e  4388              BICS     r0,r0,r1              ;389
000060  62a0              STR      r0,[r4,#0x28]         ;389
000062  6aa0              LDR      r0,[r4,#0x28]         ;390
000064  4330              ORRS     r0,r0,r6              ;390
                  |L10.102|
000066  62a0              STR      r0,[r4,#0x28]         ;385
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
                  |L10.108|
00006c  2140              MOVS     r1,#0x40              ;384
00006e  4308              ORRS     r0,r0,r1              ;384
000070  62a0              STR      r0,[r4,#0x28]         ;384
000072  6aa0              LDR      r0,[r4,#0x28]         ;385
000074  43b0              BICS     r0,r0,r6              ;385
000076  e7f6              B        |L10.102|
;;;394    
                          ENDP

                  |L10.120|
                          DCD      ||.constdata||+0x20
                  |L10.124|
                          DCD      0x50000200
                  |L10.128|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectLINMode||, CODE, READONLY, ALIGN=1

                  UART_SelectLINMode PROC
;;;433     */
;;;434    void UART_SelectLINMode(UART_T *psUART, uint32_t u32Mode, uint32_t u32BreakLength)
000000  b510              PUSH     {r4,lr}
;;;435    {
;;;436        /* Select LIN function mode */
;;;437        psUART->FUNCSEL = UART_FUNCSEL_LIN;
000002  2301              MOVS     r3,#1
000004  6303              STR      r3,[r0,#0x30]
;;;438    
;;;439        /* Select LIN function setting : Tx enable, Rx enable and break field length */
;;;440        psUART->ALTCTL &= ~(UART_ALTCTL_LINTXEN_Msk | UART_ALTCTL_LINRXEN_Msk | UART_ALTCTL_BRKFL_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  24cf              MOVS     r4,#0xcf
00000a  43a3              BICS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;441        psUART->ALTCTL |= (u32Mode | (u32BreakLength << UART_ALTCTL_BRKFL_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  4311              ORRS     r1,r1,r2
000012  430b              ORRS     r3,r3,r1
000014  62c3              STR      r3,[r0,#0x2c]
;;;442    }
000016  bd10              POP      {r4,pc}
;;;443    
                          ENDP


                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;409     */
;;;410    void UART_SelectRS485Mode(UART_T *psUART, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;411    {
;;;412        /* Select UART RS485 function mode */
;;;413        psUART->FUNCSEL = UART_FUNCSEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;414    
;;;415        /* Set RS585 configuration */
;;;416        psUART->ALTCTL &= ~(UART_ALTCTL_RS485NMM_Msk | UART_ALTCTL_RS485AUD_Msk | UART_ALTCTL_RS485AAD_Msk | UART_ALTCTL_ADDRMV_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L12.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;417        psUART->ALTCTL |= (u32Mode | (u32Addr << UART_ALTCTL_ADDRMV_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;418    }
000018  bd10              POP      {r4,pc}
;;;419    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;287     */
;;;288    void UART_SetLine_Config(UART_T *psUART, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t  u32StopBits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;289    {
000002  4605              MOV      r5,r0
;;;290        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;291        uint32_t au32ClkTbl[4] = {__HXT, 0, __LXT, __HIRC_DIV2};
000004  481b              LDR      r0,|L13.116|
000006  460c              MOV      r4,r1                 ;289
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;289
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;292        uint32_t u32Baud_Div = 0;
;;;293    
;;;294        /* Get UART clock source selection */
;;;295        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UARTSEL_Msk) >> CLK_CLKSEL1_UARTSEL_Pos;
000010  4819              LDR      r0,|L13.120|
000012  6941              LDR      r1,[r0,#0x14]
;;;296    
;;;297        /* Get UART clock divider number */
;;;298        u8UartClkDivNum = (CLK->CLKDIV0 & CLK_CLKDIV0_UARTDIV_Msk) >> CLK_CLKDIV0_UARTDIV_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;299    
;;;300        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;301        if (u8UartClkSrcSel == 1)
;;;302            au32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;303    
;;;304        /* Set UART baud rate */
;;;305        if (u32Baudrate != 0)
;;;306        {
;;;307            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((au32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Baudrate);
;;;308    
;;;309            if (u32Baud_Div > 0xFFFF)
;;;310                psUART->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((au32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Baudrate));
;;;311            else
;;;312                psUART->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;313        }
;;;314    
;;;315        /* Set UART line configuration */
;;;316        psUART->LINE = u32DataWidth | u32Parity | u32StopBits;
;;;317    }
000016  0189              LSLS     r1,r1,#6
000018  0f8e              LSRS     r6,r1,#30
00001a  0500              LSLS     r0,r0,#20
00001c  0f07              LSRS     r7,r0,#28
00001e  2e01              CMP      r6,#1                 ;301
000020  d102              BNE      |L13.40|
000022  f7fffffe          BL       CLK_GetPLLClockFreq
000026  9001              STR      r0,[sp,#4]            ;302
                  |L13.40|
000028  2c00              CMP      r4,#0                 ;305
00002a  d01b              BEQ      |L13.100|
00002c  00b1              LSLS     r1,r6,#2              ;307
00002e  4668              MOV      r0,sp                 ;307
000030  5840              LDR      r0,[r0,r1]            ;307
000032  1c79              ADDS     r1,r7,#1              ;307
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4606              MOV      r6,r0                 ;307
00003a  0861              LSRS     r1,r4,#1              ;307
00003c  1840              ADDS     r0,r0,r1              ;307
00003e  4621              MOV      r1,r4                 ;307
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490d              LDR      r1,|L13.124|
000046  1e80              SUBS     r0,r0,#2              ;309
000048  4288              CMP      r0,r1                 ;309
00004a  d907              BLS      |L13.92|
00004c  00e1              LSLS     r1,r4,#3              ;310
00004e  1870              ADDS     r0,r6,r1              ;310
000050  4621              MOV      r1,r4                 ;310
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0900              LSRS     r0,r0,#4              ;310
000058  1e80              SUBS     r0,r0,#2              ;310
00005a  e002              B        |L13.98|
                  |L13.92|
00005c  2103              MOVS     r1,#3                 ;312
00005e  0709              LSLS     r1,r1,#28             ;312
000060  4308              ORRS     r0,r0,r1              ;312
                  |L13.98|
000062  6268              STR      r0,[r5,#0x24]         ;310
                  |L13.100|
000064  9908              LDR      r1,[sp,#0x20]         ;316
000066  9807              LDR      r0,[sp,#0x1c]         ;316
000068  4308              ORRS     r0,r0,r1              ;316
00006a  990e              LDR      r1,[sp,#0x38]         ;316
00006c  4308              ORRS     r0,r0,r1              ;316
00006e  60e8              STR      r0,[r5,#0xc]          ;316
000070  b009              ADD      sp,sp,#0x24
000072  bdf0              POP      {r4-r7,pc}
;;;318    
                          ENDP

                  |L13.116|
                          DCD      ||.constdata||+0x10
                  |L13.120|
                          DCD      0x50000200
                  |L13.124|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;329     */
;;;330    void UART_SetTimeoutCnt(UART_T *psUART, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;331    {
;;;332        /* Set time-out interrupt comparator */
;;;333        psUART->TOUT = (psUART->TOUT & ~UART_TOUT_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;334    
;;;335        /* Set time-out counter enable */
;;;336        psUART->INTEN |= UART_INTEN_TOCNTEN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;337    }
000014  4770              BX       lr
;;;338    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;455     */
;;;456    uint32_t UART_Write(UART_T *psUART, uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;457    {
000002  4604              MOV      r4,r0
;;;458        uint32_t  u32Count, u32Delayno;
;;;459    
;;;460        for (u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;461        {
;;;462            u32Delayno = 0;
;;;463    
;;;464            while (psUART->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)  /* Check Tx Full */
;;;465            {
;;;466                u32Delayno++;
;;;467    
;;;468                if (u32Delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L15.38|
                  |L15.12|
00000c  2300              MOVS     r3,#0                 ;462
00000e  e004              B        |L15.26|
                  |L15.16|
000010  1c5b              ADDS     r3,r3,#1              ;464
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L15.26|
;;;469                    return FALSE;
000016  2000              MOVS     r0,#0
;;;470            }
;;;471    
;;;472            psUART->DAT = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;473        }
;;;474    
;;;475        return u32Count;
;;;476    
;;;477    }
000018  bd70              POP      {r4-r6,pc}
                  |L15.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;464
00001c  0236              LSLS     r6,r6,#8              ;464
00001e  d4f7              BMI      |L15.16|
000020  5c0b              LDRB     r3,[r1,r0]            ;472
000022  6023              STR      r3,[r4,#0]            ;472
000024  1c40              ADDS     r0,r0,#1              ;472
                  |L15.38|
000026  4290              CMP      r0,r2                 ;460
000028  d1f0              BNE      |L15.12|
00002a  bd70              POP      {r4-r6,pc}
;;;478    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x016e3600
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x016e3600
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00008000
                          DCD      0x016e3600

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 479
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
