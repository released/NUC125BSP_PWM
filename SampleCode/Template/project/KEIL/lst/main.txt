; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=2

                  GPIO_Init PROC
;;;57     
;;;58     void GPIO_Init(void)
000000  b510              PUSH     {r4,lr}
;;;59     {
;;;60         GPIO_SetMode(PB, BIT4, GPIO_MODE_OUTPUT);
000002  2201              MOVS     r2,#1
000004  2110              MOVS     r1,#0x10
000006  4802              LDR      r0,|L1.16|
000008  f7fffffe          BL       GPIO_SetMode
;;;61     }
00000c  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      0x50004040

                          AREA ||i.PWM_Init||, CODE, READONLY, ALIGN=2

                  PWM_Init PROC
;;;42     
;;;43     void PWM_Init(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;44     {
;;;45         PWM_ConfigOutputChannel(PWM0, PWM0_CH0, 10000, 50);
000002  4d21              LDR      r5,|L2.136|
000004  4c21              LDR      r4,|L2.140|
000006  2332              MOVS     r3,#0x32
000008  462a              MOV      r2,r5
00000a  2100              MOVS     r1,#0
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       PWM_ConfigOutputChannel
;;;46         PWM_ConfigOutputChannel(PWM0, PWM0_CH4, 10000, 50);
000012  2332              MOVS     r3,#0x32
000014  462a              MOV      r2,r5
000016  2104              MOVS     r1,#4
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       PWM_ConfigOutputChannel
;;;47         PWM_ConfigOutputChannel(PWM0, PWM0_CH5, 10000, 50);
00001e  2332              MOVS     r3,#0x32
000020  462a              MOV      r2,r5
000022  2105              MOVS     r1,#5
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       PWM_ConfigOutputChannel
;;;48     	
;;;49         PWM_EnableOutput(PWM0, PWM_CH_0_MASK|PWM_CH_4_MASK|PWM_CH_5_MASK);
00002a  2131              MOVS     r1,#0x31
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       PWM_EnableOutput
;;;50     	
;;;51       	PWM_SET_OUTPUT_LEVEL(PWM0, (PWM_CH_0_MASK|PWM_CH_4_MASK|PWM_CH_5_MASK), PWM_OUTPUT_NOTHING, PWM_OUTPUT_NOTHING, PWM_OUTPUT_HIGH, PWM_OUTPUT_LOW);
000032  2000              MOVS     r0,#0
000034  2701              MOVS     r7,#1
                  |L2.54|
000036  4639              MOV      r1,r7
000038  4081              LSLS     r1,r1,r0
00003a  2231              MOVS     r2,#0x31
00003c  4211              TST      r1,r2
00003e  d01a              BEQ      |L2.118|
000040  4912              LDR      r1,|L2.140|
000042  3180              ADDS     r1,r1,#0x80
000044  6b0b              LDR      r3,[r1,#0x30]
000046  2603              MOVS     r6,#3
000048  0042              LSLS     r2,r0,#1
00004a  4634              MOV      r4,r6
00004c  4094              LSLS     r4,r4,r2
00004e  43a3              BICS     r3,r3,r4
000050  630b              STR      r3,[r1,#0x30]
000052  6b0d              LDR      r5,[r1,#0x30]
000054  4633              MOV      r3,r6
000056  3210              ADDS     r2,r2,#0x10
000058  4093              LSLS     r3,r3,r2
00005a  2602              MOVS     r6,#2
00005c  439d              BICS     r5,r5,r3
00005e  4096              LSLS     r6,r6,r2
000060  4335              ORRS     r5,r5,r6
000062  630d              STR      r5,[r1,#0x30]
000064  6b4d              LDR      r5,[r1,#0x34]
000066  43a5              BICS     r5,r5,r4
000068  634d              STR      r5,[r1,#0x34]
00006a  6b4c              LDR      r4,[r1,#0x34]
00006c  439c              BICS     r4,r4,r3
00006e  463b              MOV      r3,r7
000070  4093              LSLS     r3,r3,r2
000072  431c              ORRS     r4,r4,r3
000074  634c              STR      r4,[r1,#0x34]
                  |L2.118|
000076  1c40              ADDS     r0,r0,#1
000078  2806              CMP      r0,#6
00007a  dbdc              BLT      |L2.54|
;;;52     
;;;53         /* Start PWM module */
;;;54         PWM_Start(PWM0, (PWM_CH_0_MASK|PWM_CH_4_MASK|PWM_CH_5_MASK));
00007c  2131              MOVS     r1,#0x31
00007e  4803              LDR      r0,|L2.140|
000080  f7fffffe          BL       PWM_Start
;;;55     }
000084  bdf8              POP      {r3-r7,pc}
;;;56     
                          ENDP

000086  0000              DCW      0x0000
                  |L2.136|
                          DCD      0x00002710
                  |L2.140|
                          DCD      0x40044000

                          AREA ||i.PWM_Set_Duty||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  PWM_Set_Duty PROC
;;;22     
;;;23     void PWM_Set_Duty(uint8_t channel , uint8_t DutyCycle)
000000  b570              PUSH     {r4-r6,lr}
;;;24     {
000002  460e              MOV      r6,r1
;;;25         uint32_t u32NewCMR = 0;
;;;26     	printf("channel : 0x%2X , duty : %2d\r\n" , channel,DutyCycle);
000004  460a              MOV      r2,r1
000006  4604              MOV      r4,r0                 ;24
000008  4601              MOV      r1,r0
00000a  a009              ADR      r0,|L3.48|
00000c  f7fffffe          BL       __2printf
;;;27     
;;;28     	#if 0
;;;29     	PWM_ConfigOutputChannel(PWM0, channel, 10000, DutyCycle);
;;;30     	#else
;;;31         u32NewCMR = PWM_GET_CNR(PWM0, channel);
000010  0860              LSRS     r0,r4,#1
000012  4d0f              LDR      r5,|L3.80|
000014  00c0              LSLS     r0,r0,#3
000016  1940              ADDS     r0,r0,r5
000018  6b01              LDR      r1,[r0,#0x30]
;;;32     	
;;;33         u32NewCMR = u32NewCMR * (100-DutyCycle)/100;	
00001a  2064              MOVS     r0,#0x64
00001c  1b80              SUBS     r0,r0,r6
00001e  4348              MULS     r0,r1,r0
000020  2164              MOVS     r1,#0x64
000022  f7fffffe          BL       __aeabi_uidivmod
;;;34     //	u32NewCMR = (u32NewCMR+1) * (DutyCycle)/100;
;;;35         
;;;36     	PWM_SET_CMR(PWM0, channel, u32NewCMR);
000026  00a1              LSLS     r1,r4,#2
000028  1949              ADDS     r1,r1,r5
00002a  6508              STR      r0,[r1,#0x50]
;;;37     	#endif
;;;38     
;;;39     	
;;;40     
;;;41     }
00002c  bd70              POP      {r4-r6,pc}
;;;42     
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
000030  6368616e          DCB      "channel : 0x%2X , duty : %2d\r\n",0
000034  6e656c20
000038  3a203078
00003c  25325820
000040  2c206475
000044  7479203a
000048  20253264
00004c  0d0a00  
00004f  00                DCB      0
                  |L3.80|
                          DCD      0x40044000

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;189    
;;;190    void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;191    {
;;;192        /*---------------------------------------------------------------------------------------------------------*/
;;;193        /* Init System Clock                                                                                       */
;;;194        /*---------------------------------------------------------------------------------------------------------*/
;;;195    
;;;196        /* Enable Internal RC 22.1184MHz clock */
;;;197        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;198    
;;;199        /* Waiting for Internal RC clock ready */
;;;200        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;201    
;;;202        /* Switch HCLK clock source to Internal RC and HCLK source divide 1 */
;;;203        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HXT, CLK_CLKDIV0_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  4608              MOV      r0,r1
000012  f7fffffe          BL       CLK_SetHCLK
;;;204    
;;;205        /* Enable external XTAL 12MHz clock */
;;;206        CLK_EnableXtalRC(CLK_PWRCTL_HXTEN);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;207    
;;;208        /* Waiting for external XTAL clock ready */
;;;209        CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;210    
;;;211        /* Set core clock as PLL_CLOCK from PLL */
;;;212        CLK_SetCoreClock(PLL_CLOCK);
000022  4820              LDR      r0,|L4.164|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;213    
;;;214        /* Enable UART module clock */
;;;215        CLK_EnableModuleClock(UART0_MODULE);
000028  4c1f              LDR      r4,|L4.168|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       CLK_EnableModuleClock
;;;216        /* Select UART module clock source */
;;;217        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UARTSEL_HIRC_DIV2, CLK_CLKDIV0_UART(1));
000030  2103              MOVS     r1,#3
000032  2200              MOVS     r2,#0
000034  0609              LSLS     r1,r1,#24
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       CLK_SetModuleClock
;;;218    	
;;;219        CLK_EnableModuleClock(TMR3_MODULE);
00003c  4c1b              LDR      r4,|L4.172|
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       CLK_EnableModuleClock
;;;220        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL1_TMR3SEL_PCLK1, 0);
000044  2101              MOVS     r1,#1
000046  2200              MOVS     r2,#0
000048  0549              LSLS     r1,r1,#21
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       CLK_SetModuleClock
;;;221    
;;;222        CLK_EnableModuleClock(PWM0_MODULE);
000050  4c17              LDR      r4,|L4.176|
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       CLK_EnableModuleClock
;;;223        CLK_SetModuleClock(PWM0_MODULE, CLK_CLKSEL1_PWM0SEL_PCLK0, 0);
000058  2101              MOVS     r1,#1
00005a  2200              MOVS     r2,#0
00005c  0789              LSLS     r1,r1,#30
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       CLK_SetModuleClock
;;;224    
;;;225        /* Update System Core Clock */
;;;226        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock and cyclesPerUs automatically. */
;;;227        SystemCoreClockUpdate();
000064  f7fffffe          BL       SystemCoreClockUpdate
;;;228    
;;;229        /*---------------------------------------------------------------------------------------------------------*/
;;;230        /* Init I/O Multi-function                                                                                 */
;;;231        /*---------------------------------------------------------------------------------------------------------*/
;;;232    
;;;233        /* Set PB multi-function pins for UART0 RXD(PB.0) and TXD(PB.1) */
;;;234        SYS->GPB_MFPL = (SYS->GPB_MFPL & (~SYS_GPB_MFPL_PB0MFP_Msk)) | SYS_GPB_MFPL_PB0MFP_UART0_RXD;
000068  2005              MOVS     r0,#5
00006a  0700              LSLS     r0,r0,#28
00006c  6b81              LDR      r1,[r0,#0x38]
00006e  0909              LSRS     r1,r1,#4
000070  0109              LSLS     r1,r1,#4
000072  1c49              ADDS     r1,r1,#1
000074  6381              STR      r1,[r0,#0x38]
;;;235        SYS->GPB_MFPL = (SYS->GPB_MFPL & (~SYS_GPB_MFPL_PB1MFP_Msk)) | SYS_GPB_MFPL_PB1MFP_UART0_TXD;
000076  6b82              LDR      r2,[r0,#0x38]
000078  21f0              MOVS     r1,#0xf0
00007a  438a              BICS     r2,r2,r1
00007c  3210              ADDS     r2,r2,#0x10
00007e  6382              STR      r2,[r0,#0x38]
;;;236    
;;;237        SYS->GPC_MFPH = (SYS->GPC_MFPH & (~SYS_GPC_MFPH_PC8MFP_Msk)) | SYS_GPC_MFPH_PC8MFP_PWM0_CH4;
000080  480c              LDR      r0,|L4.180|
000082  6842              LDR      r2,[r0,#4]
000084  0912              LSRS     r2,r2,#4
000086  0112              LSLS     r2,r2,#4
000088  1d12              ADDS     r2,r2,#4
00008a  6042              STR      r2,[r0,#4]
;;;238        SYS->GPC_MFPH = (SYS->GPC_MFPH & (~SYS_GPC_MFPH_PC9MFP_Msk)) | SYS_GPC_MFPH_PC9MFP_PWM0_CH5;
00008c  6842              LDR      r2,[r0,#4]
00008e  438a              BICS     r2,r2,r1
000090  3240              ADDS     r2,r2,#0x40
000092  6042              STR      r2,[r0,#4]
;;;239        SYS->GPC_MFPH = (SYS->GPC_MFPH & (~SYS_GPC_MFPH_PC10MFP_Msk)) | SYS_GPC_MFPH_PC10MFP_PWM0_CH0;
000094  6841              LDR      r1,[r0,#4]
000096  220f              MOVS     r2,#0xf
000098  0212              LSLS     r2,r2,#8
00009a  4391              BICS     r1,r1,r2
00009c  0102              LSLS     r2,r0,#4
00009e  1889              ADDS     r1,r1,r2
0000a0  6041              STR      r1,[r0,#4]
;;;240    	
;;;241    }
0000a2  bd10              POP      {r4,pc}
;;;242    
                          ENDP

                  |L4.164|
                          DCD      0x02faf080
                  |L4.168|
                          DCD      0x57803d10
                  |L4.172|
                          DCD      0x5f400005
                  |L4.176|
                          DCD      0x53e00016
                  |L4.180|
                          DCD      0x50000040

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;82     
;;;83     void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;84     {
;;;85         TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L5.44|
000004  227d              MOVS     r2,#0x7d
000006  2101              MOVS     r1,#1
000008  00d2              LSLS     r2,r2,#3
00000a  06c9              LSLS     r1,r1,#27
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  0621              LSLS     r1,r4,#24
000016  4308              ORRS     r0,r0,r1
000018  6020              STR      r0,[r4,#0]
;;;86         TIMER_EnableInt(TIMER3);
;;;87         NVIC_EnableIRQ(TMR3_IRQn);	
00001a  200b              MOVS     r0,#0xb
00001c  f7fffffe          BL       __NVIC_EnableIRQ
000020  6820              LDR      r0,[r4,#0]
000022  0661              LSLS     r1,r4,#25
000024  4308              ORRS     r0,r0,r1
000026  6020              STR      r0,[r4,#0]
;;;88         TIMER_Start(TIMER3);
;;;89     }
000028  bd10              POP      {r4,pc}
;;;90     
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40110020

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  TMR3_IRQHandler PROC
;;;63     
;;;64     void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4a0e              LDR      r2,|L6.60|
000004  6890              LDR      r0,[r2,#8]
000006  07c0              LSLS     r0,r0,#31
000008  0fc0              LSRS     r0,r0,#31
;;;65     {
00000a  d015              BEQ      |L6.56|
00000c  2101              MOVS     r1,#1
00000e  6091              STR      r1,[r2,#8]
;;;66     	static uint16_t CNT = 0;
;;;67     	static uint16_t counter = 0;	
;;;68     	
;;;69         if(TIMER_GetIntFlag(TIMER3) == 1)
;;;70         {
;;;71             TIMER_ClearIntFlag(TIMER3);
;;;72     	
;;;73     		if (CNT++ >= 1000)
000010  4a0b              LDR      r2,|L6.64|
000012  8810              LDRH     r0,[r2,#0]  ; CNT
000014  1c43              ADDS     r3,r0,#1
000016  8013              STRH     r3,[r2,#0]
000018  237d              MOVS     r3,#0x7d
00001a  00db              LSLS     r3,r3,#3
00001c  4298              CMP      r0,r3
00001e  d30b              BCC      |L6.56|
;;;74     		{		
;;;75     			CNT = 0;
000020  2000              MOVS     r0,#0
000022  8010              STRH     r0,[r2,#0]
;;;76     			PB4 ^= 1;
000024  4807              LDR      r0,|L6.68|
000026  6903              LDR      r3,[r0,#0x10]
000028  404b              EORS     r3,r3,r1
00002a  6103              STR      r3,[r0,#0x10]
;;;77     			printf("counter : 0x%2X\r\n" , counter++);
00002c  8851              LDRH     r1,[r2,#2]  ; counter
00002e  1c48              ADDS     r0,r1,#1
000030  8050              STRH     r0,[r2,#2]
000032  a005              ADR      r0,|L6.72|
000034  f7fffffe          BL       __2printf
                  |L6.56|
;;;78     
;;;79     		}
;;;80         }
;;;81     }
000038  bd10              POP      {r4,pc}
;;;82     
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40110020
                  |L6.64|
                          DCD      ||.data||
                  |L6.68|
                          DCD      0x50004240
                  |L6.72|
000048  636f756e          DCB      "counter : 0x%2X\r\n",0
00004c  74657220
000050  3a203078
000054  2532580d
000058  0a00    
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART0_IRQHandler PROC
;;;154    
;;;155    void UART0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;156    {
;;;157    
;;;158        if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c06              LDR      r4,|L7.28|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  2111              MOVS     r1,#0x11
000008  0209              LSLS     r1,r1,#8
00000a  4208              TST      r0,r1
00000c  d102              BNE      |L7.20|
;;;159        {
;;;160            while(UART_GET_RX_EMPTY(UART0) == 0)
;;;161            {
;;;162                UARTx_Process();
;;;163            }
;;;164        }
;;;165    }
00000e  bd10              POP      {r4,pc}
                  |L7.16|
000010  f7fffffe          BL       UARTx_Process
                  |L7.20|
000014  69a0              LDR      r0,[r4,#0x18]         ;160
000016  0440              LSLS     r0,r0,#17             ;160
000018  d5fa              BPL      |L7.16|
00001a  bd10              POP      {r4,pc}
;;;166    
                          ENDP

                  |L7.28|
                          DCD      0x40050000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;166    
;;;167    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    
;;;170        SYS_ResetModule(UART0_RST);
000002  4819              LDR      r0,|L8.104|
000004  f7fffffe          BL       SYS_ResetModule
;;;171    
;;;172        /* Configure UART0 and set UART0 baud rate */
;;;173        UART_Open(UART0, 115200);
000008  4c18              LDR      r4,|L8.108|
00000a  21e1              MOVS     r1,#0xe1
00000c  0249              LSLS     r1,r1,#9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;174    
;;;175    	/* Set UART receive time-out */
;;;176    	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;177    
;;;178        UART_EnableInt(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_RXTOIEN_Msk);
00001c  2111              MOVS     r1,#0x11
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       UART_EnableInt
;;;179        NVIC_EnableIRQ(UART0_IRQn);
000024  200c              MOVS     r0,#0xc
000026  f7fffffe          BL       __NVIC_EnableIRQ
;;;180    
;;;181    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00002a  f7fffffe          BL       CLK_GetCPUFreq
00002e  4601              MOV      r1,r0
000030  a00f              ADR      r0,|L8.112|
000032  f7fffffe          BL       __2printf
;;;182    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000036  f7fffffe          BL       CLK_GetHXTFreq
00003a  4601              MOV      r1,r0
00003c  a013              ADR      r0,|L8.140|
00003e  f7fffffe          BL       __2printf
;;;183    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000042  f7fffffe          BL       CLK_GetLXTFreq
000046  4601              MOV      r1,r0
000048  a016              ADR      r0,|L8.164|
00004a  f7fffffe          BL       __2printf
;;;184    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
00004e  f7fffffe          BL       CLK_GetPCLK0Freq
000052  4601              MOV      r1,r0
000054  a019              ADR      r0,|L8.188|
000056  f7fffffe          BL       __2printf
;;;185    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
00005a  f7fffffe          BL       CLK_GetPCLK1Freq
00005e  4601              MOV      r1,r0
000060  a01d              ADR      r0,|L8.216|
000062  f7fffffe          BL       __2printf
;;;186    	
;;;187    }
000066  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  |L8.104|
                          DCD      0x04000010
                  |L8.108|
                          DCD      0x40050000
                  |L8.112|
000070  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
000074  4b5f4765
000078  74435055
00007c  46726571
000080  203a2025
000084  38640d0a
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L8.140|
00008c  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000090  47657448
000094  58544672
000098  6571203a
00009c  20253864
0000a0  0d0a00  
0000a3  00                DCB      0
                  |L8.164|
0000a4  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000a8  4765744c
0000ac  58544672
0000b0  6571203a
0000b4  20253864
0000b8  0d0a00  
0000bb  00                DCB      0
                  |L8.188|
0000bc  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000c0  47657450
0000c4  434c4b30
0000c8  46726571
0000cc  203a2025
0000d0  38640d0a
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L8.216|
0000d8  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000dc  47657450
0000e0  434c4b31
0000e4  46726571
0000e8  203a2025
0000ec  38640d0a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UARTx_Process PROC
;;;91     
;;;92     void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;93     {
;;;94     	uint8_t res = 0;
;;;95     	res = UART_READ(UART0);
000002  4827              LDR      r0,|L9.160|
000004  6800              LDR      r0,[r0,#0]
000006  b2c4              UXTB     r4,r0
;;;96     
;;;97     	if (res > 0x7F)
000008  2c7f              CMP      r4,#0x7f
00000a  d903              BLS      |L9.20|
;;;98     	{
;;;99     		printf("invalid command\r\n");
00000c  a025              ADR      r0,|L9.164|
00000e  f7fffffe          BL       __2printf
                  |L9.18|
;;;100    	}
;;;101    	else
;;;102    	{
;;;103    		printf("press : %d\r\n" , res);
;;;104    		switch(res)
;;;105    		{
;;;106    			case '0':
;;;107    				PWM_Set_Duty(PWM0_CH0 , 75);	
;;;108    				break;
;;;109    			case '1':
;;;110    				PWM_Set_Duty(PWM0_CH4 , 75);	
;;;111    				break;
;;;112    			case '2':
;;;113    				PWM_Set_Duty(PWM0_CH5 , 75);	
;;;114    				break;
;;;115    			
;;;116    			case '3':
;;;117    				PWM_Set_Duty(PWM0_CH0 , 50);	
;;;118    				break;
;;;119    			case '4':
;;;120    				PWM_Set_Duty(PWM0_CH4 , 50);	
;;;121    				break;
;;;122    			case '5':
;;;123    				PWM_Set_Duty(PWM0_CH5 , 50);	
;;;124    				break;
;;;125    
;;;126    			case '6':
;;;127    				PWM_Set_Duty(PWM0_CH0 , 25);	
;;;128    				break;
;;;129    			case '7':
;;;130    				PWM_Set_Duty(PWM0_CH4 , 25);	
;;;131    				break;
;;;132    			case '8':
;;;133    				PWM_Set_Duty(PWM0_CH5 , 25);	
;;;134    				break;
;;;135    
;;;136    			case '9':
;;;137    				PWM_Set_Duty(PWM0_CH0 , 0);	
;;;138    				break;
;;;139    			case 'a':
;;;140    				PWM_Set_Duty(PWM0_CH4 , 0);	
;;;141    				break;
;;;142    			case 'b':
;;;143    				PWM_Set_Duty(PWM0_CH5 , 0);	
;;;144    				break;
;;;145    			
;;;146    			case 'Z':
;;;147    			case 'z':			
;;;148    				NVIC_SystemReset();
;;;149    				break;
;;;150    				
;;;151    		}
;;;152    	}
;;;153    }
000012  bd10              POP      {r4,pc}
                  |L9.20|
000014  4621              MOV      r1,r4                 ;103
000016  a028              ADR      r0,|L9.184|
000018  f7fffffe          BL       __2printf
00001c  2c37              CMP      r4,#0x37              ;104
00001e  d032              BEQ      |L9.134|
000020  dc09              BGT      |L9.54|
000022  3c30              SUBS     r4,r4,#0x30           ;104
000024  0023              MOVS     r3,r4                 ;104
000026  f7fffffe          BL       __ARM_common_switch8
00002a  071d              DCB      0x07,0x1d
00002c  1f242628          DCB      0x1f,0x24,0x26,0x28
000030  2a2c0500          DCB      0x2a,0x2c,0x05,0x00
000034  e7ed              B        |L9.18|
                  |L9.54|
000036  2c61              CMP      r4,#0x61              ;104
000038  d02c              BEQ      |L9.148|
00003a  dc06              BGT      |L9.74|
00003c  2c38              CMP      r4,#0x38              ;104
00003e  d024              BEQ      |L9.138|
000040  2c39              CMP      r4,#0x39              ;104
000042  d024              BEQ      |L9.142|
000044  2c5a              CMP      r4,#0x5a              ;104
000046  d1e4              BNE      |L9.18|
000048  e003              B        |L9.82|
                  |L9.74|
00004a  2c62              CMP      r4,#0x62              ;104
00004c  d025              BEQ      |L9.154|
00004e  2c7a              CMP      r4,#0x7a              ;104
000050  d1df              BNE      |L9.18|
                  |L9.82|
000052  f3bf8f4f          DSB                            ;104
000056  491d              LDR      r1,|L9.204|
000058  481b              LDR      r0,|L9.200|
00005a  60c8              STR      r0,[r1,#0xc]          ;104
00005c  f3bf8f4f          DSB                            ;104
                  |L9.96|
000060  bf00              NOP                            ;104
000062  e7fd              B        |L9.96|
000064  214b              MOVS     r1,#0x4b              ;107
000066  e013              B        |L9.144|
000068  214b              MOVS     r1,#0x4b              ;110
00006a  e014              B        |L9.150|
                  |L9.108|
00006c  f7fffffe          BL       PWM_Set_Duty
000070  bd10              POP      {r4,pc}
000072  214b              MOVS     r1,#0x4b              ;113
000074  e012              B        |L9.156|
000076  2132              MOVS     r1,#0x32              ;117
000078  e00a              B        |L9.144|
00007a  2132              MOVS     r1,#0x32              ;120
00007c  e00b              B        |L9.150|
00007e  2132              MOVS     r1,#0x32              ;123
000080  e00c              B        |L9.156|
000082  2119              MOVS     r1,#0x19              ;127
000084  e004              B        |L9.144|
                  |L9.134|
000086  2119              MOVS     r1,#0x19              ;130
000088  e005              B        |L9.150|
                  |L9.138|
00008a  2119              MOVS     r1,#0x19              ;133
00008c  e006              B        |L9.156|
                  |L9.142|
00008e  2100              MOVS     r1,#0                 ;137
                  |L9.144|
000090  2000              MOVS     r0,#0                 ;137
000092  e7eb              B        |L9.108|
                  |L9.148|
000094  2100              MOVS     r1,#0                 ;140
                  |L9.150|
000096  2004              MOVS     r0,#4                 ;140
000098  e7e8              B        |L9.108|
                  |L9.154|
00009a  2100              MOVS     r1,#0                 ;143
                  |L9.156|
00009c  2005              MOVS     r0,#5                 ;143
00009e  e7e5              B        |L9.108|
;;;154    
                          ENDP

                  |L9.160|
                          DCD      0x40050000
                  |L9.164|
0000a4  696e7661          DCB      "invalid command\r\n",0
0000a8  6c696420
0000ac  636f6d6d
0000b0  616e640d
0000b4  0a00    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L9.184|
0000b8  70726573          DCB      "press : %d\r\n",0
0000bc  73203a20
0000c0  25640d0a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L9.200|
                          DCD      0x05fa0004
                  |L9.204|
                          DCD      0xe000ed00

                          AREA ||i.__NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  __NVIC_EnableIRQ PROC
;;;614     */
;;;615    __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;616    {
000002  db05              BLT      |L10.16|
;;;617      if ((int32_t)(IRQn) >= 0)
;;;618      {
;;;619        NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  06c1              LSLS     r1,r0,#27
000006  0ec9              LSRS     r1,r1,#27
000008  2001              MOVS     r0,#1
00000a  4088              LSLS     r0,r0,r1
00000c  4901              LDR      r1,|L10.20|
00000e  6008              STR      r0,[r1,#0]
                  |L10.16|
;;;620      }
;;;621    }
000010  4770              BX       lr
;;;622    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0xe000e100

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;242    
;;;243    int main()
000000  f7fffffe          BL       SYS_Init
;;;244    {
;;;245    
;;;246        SYS_Init();
;;;247    
;;;248    	UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;249    
;;;250    	TIMER3_Init();
000008  f7fffffe          BL       TIMER3_Init
;;;251    	GPIO_Init();
00000c  f7fffffe          BL       GPIO_Init
;;;252    
;;;253    	PWM_Init();
000010  f7fffffe          BL       PWM_Init
                  |L11.20|
;;;254    
;;;255        while (1)
000014  e7fe              B        |L11.20|
;;;256        {
;;;257    
;;;258        }
;;;259    }
;;;260    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=1

                  ||CNT||
000000  0000              DCW      0x0000
                  counter
000002  0000              DCW      0x0000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L72.16|
00000e  461d              MOV      r5,r3
                  |L72.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_dc95c662____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_dc95c662____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_dc95c662____REVSH|
#line 479
|__asm___6_main_c_dc95c662____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
